// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/BlockResponse
type BlockResponse struct {
	// Block Number.
	BlockNumber float64 `json:"blockNumber"`
	// The Unix timestamp of when the block was mined.
	BlockTimestamp float64 `json:"blockTimestamp"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *BlockResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *BlockResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// SetBlockNumber sets the value of BlockNumber.
func (s *BlockResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *BlockResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

func (*BlockResponse) blockFromTimestampRes() {}
func (*BlockResponse) blockToTimestampRes()   {}
func (*BlockResponse) crossChainBlockRes()    {}
func (*BlockResponse) getLatestBlockRes()     {}

// Ref: #/components/schemas/Chain
type Chain struct {
	// Unique identifier that represents the blockchain network.
	ChainId float64 `json:"chainId"`
	// Common name of the chain.
	Name string `json:"name"`
	// If the chain has indexed data available for the models.
	HasLedger bool `json:"hasLedger"`
	// If the chain has a web3 node available for the models.
	HasNode bool `json:"hasNode"`
}

// GetChainId returns the value of ChainId.
func (s *Chain) GetChainId() float64 {
	return s.ChainId
}

// GetName returns the value of Name.
func (s *Chain) GetName() string {
	return s.Name
}

// GetHasLedger returns the value of HasLedger.
func (s *Chain) GetHasLedger() bool {
	return s.HasLedger
}

// GetHasNode returns the value of HasNode.
func (s *Chain) GetHasNode() bool {
	return s.HasNode
}

// SetChainId sets the value of ChainId.
func (s *Chain) SetChainId(val float64) {
	s.ChainId = val
}

// SetName sets the value of Name.
func (s *Chain) SetName(val string) {
	s.Name = val
}

// SetHasLedger sets the value of HasLedger.
func (s *Chain) SetHasLedger(val bool) {
	s.HasLedger = val
}

// SetHasNode sets the value of HasNode.
func (s *Chain) SetHasNode(val bool) {
	s.HasNode = val
}

// Ref: #/components/schemas/ChainsResponse
type ChainsResponse struct {
	Chains []Chain `json:"chains"`
}

// GetChains returns the value of Chains.
func (s *ChainsResponse) GetChains() []Chain {
	return s.Chains
}

// SetChains sets the value of Chains.
func (s *ChainsResponse) SetChains(val []Chain) {
	s.Chains = val
}

func (*ChainsResponse) getChainsRes() {}

type CheckHealthOK struct {
	Status  OptString                `json:"status"`
	Info    OptNilCheckHealthOKInfo  `json:"info"`
	Error   OptNilCheckHealthOKError `json:"error"`
	Details OptCheckHealthOKDetails  `json:"details"`
}

// GetStatus returns the value of Status.
func (s *CheckHealthOK) GetStatus() OptString {
	return s.Status
}

// GetInfo returns the value of Info.
func (s *CheckHealthOK) GetInfo() OptNilCheckHealthOKInfo {
	return s.Info
}

// GetError returns the value of Error.
func (s *CheckHealthOK) GetError() OptNilCheckHealthOKError {
	return s.Error
}

// GetDetails returns the value of Details.
func (s *CheckHealthOK) GetDetails() OptCheckHealthOKDetails {
	return s.Details
}

// SetStatus sets the value of Status.
func (s *CheckHealthOK) SetStatus(val OptString) {
	s.Status = val
}

// SetInfo sets the value of Info.
func (s *CheckHealthOK) SetInfo(val OptNilCheckHealthOKInfo) {
	s.Info = val
}

// SetError sets the value of Error.
func (s *CheckHealthOK) SetError(val OptNilCheckHealthOKError) {
	s.Error = val
}

// SetDetails sets the value of Details.
func (s *CheckHealthOK) SetDetails(val OptCheckHealthOKDetails) {
	s.Details = val
}

func (*CheckHealthOK) checkHealthRes() {}

type CheckHealthOKDetails map[string]CheckHealthOKDetailsItem

func (s *CheckHealthOKDetails) init() CheckHealthOKDetails {
	m := *s
	if m == nil {
		m = map[string]CheckHealthOKDetailsItem{}
		*s = m
	}
	return m
}

type CheckHealthOKDetailsItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthOKDetailsItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthOKDetailsItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthOKDetailsItem) GetAdditionalProps() CheckHealthOKDetailsItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthOKDetailsItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthOKDetailsItem) SetAdditionalProps(val CheckHealthOKDetailsItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthOKDetailsItemAdditional map[string]string

func (s *CheckHealthOKDetailsItemAdditional) init() CheckHealthOKDetailsItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CheckHealthOKError map[string]CheckHealthOKErrorItem

func (s *CheckHealthOKError) init() CheckHealthOKError {
	m := *s
	if m == nil {
		m = map[string]CheckHealthOKErrorItem{}
		*s = m
	}
	return m
}

type CheckHealthOKErrorItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthOKErrorItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthOKErrorItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthOKErrorItem) GetAdditionalProps() CheckHealthOKErrorItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthOKErrorItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthOKErrorItem) SetAdditionalProps(val CheckHealthOKErrorItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthOKErrorItemAdditional map[string]string

func (s *CheckHealthOKErrorItemAdditional) init() CheckHealthOKErrorItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CheckHealthOKInfo map[string]CheckHealthOKInfoItem

func (s *CheckHealthOKInfo) init() CheckHealthOKInfo {
	m := *s
	if m == nil {
		m = map[string]CheckHealthOKInfoItem{}
		*s = m
	}
	return m
}

type CheckHealthOKInfoItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthOKInfoItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthOKInfoItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthOKInfoItem) GetAdditionalProps() CheckHealthOKInfoItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthOKInfoItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthOKInfoItem) SetAdditionalProps(val CheckHealthOKInfoItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthOKInfoItemAdditional map[string]string

func (s *CheckHealthOKInfoItemAdditional) init() CheckHealthOKInfoItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailable struct {
	Status  OptString                                `json:"status"`
	Info    OptNilCheckHealthServiceUnavailableInfo  `json:"info"`
	Error   OptNilCheckHealthServiceUnavailableError `json:"error"`
	Details OptCheckHealthServiceUnavailableDetails  `json:"details"`
}

// GetStatus returns the value of Status.
func (s *CheckHealthServiceUnavailable) GetStatus() OptString {
	return s.Status
}

// GetInfo returns the value of Info.
func (s *CheckHealthServiceUnavailable) GetInfo() OptNilCheckHealthServiceUnavailableInfo {
	return s.Info
}

// GetError returns the value of Error.
func (s *CheckHealthServiceUnavailable) GetError() OptNilCheckHealthServiceUnavailableError {
	return s.Error
}

// GetDetails returns the value of Details.
func (s *CheckHealthServiceUnavailable) GetDetails() OptCheckHealthServiceUnavailableDetails {
	return s.Details
}

// SetStatus sets the value of Status.
func (s *CheckHealthServiceUnavailable) SetStatus(val OptString) {
	s.Status = val
}

// SetInfo sets the value of Info.
func (s *CheckHealthServiceUnavailable) SetInfo(val OptNilCheckHealthServiceUnavailableInfo) {
	s.Info = val
}

// SetError sets the value of Error.
func (s *CheckHealthServiceUnavailable) SetError(val OptNilCheckHealthServiceUnavailableError) {
	s.Error = val
}

// SetDetails sets the value of Details.
func (s *CheckHealthServiceUnavailable) SetDetails(val OptCheckHealthServiceUnavailableDetails) {
	s.Details = val
}

func (*CheckHealthServiceUnavailable) checkHealthRes() {}

type CheckHealthServiceUnavailableDetails map[string]CheckHealthServiceUnavailableDetailsItem

func (s *CheckHealthServiceUnavailableDetails) init() CheckHealthServiceUnavailableDetails {
	m := *s
	if m == nil {
		m = map[string]CheckHealthServiceUnavailableDetailsItem{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailableDetailsItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthServiceUnavailableDetailsItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthServiceUnavailableDetailsItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableDetailsItem) GetAdditionalProps() CheckHealthServiceUnavailableDetailsItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthServiceUnavailableDetailsItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableDetailsItem) SetAdditionalProps(val CheckHealthServiceUnavailableDetailsItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthServiceUnavailableDetailsItemAdditional map[string]string

func (s *CheckHealthServiceUnavailableDetailsItemAdditional) init() CheckHealthServiceUnavailableDetailsItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailableError map[string]CheckHealthServiceUnavailableErrorItem

func (s *CheckHealthServiceUnavailableError) init() CheckHealthServiceUnavailableError {
	m := *s
	if m == nil {
		m = map[string]CheckHealthServiceUnavailableErrorItem{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailableErrorItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthServiceUnavailableErrorItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthServiceUnavailableErrorItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableErrorItem) GetAdditionalProps() CheckHealthServiceUnavailableErrorItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthServiceUnavailableErrorItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableErrorItem) SetAdditionalProps(val CheckHealthServiceUnavailableErrorItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthServiceUnavailableErrorItemAdditional map[string]string

func (s *CheckHealthServiceUnavailableErrorItemAdditional) init() CheckHealthServiceUnavailableErrorItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailableInfo map[string]CheckHealthServiceUnavailableInfoItem

func (s *CheckHealthServiceUnavailableInfo) init() CheckHealthServiceUnavailableInfo {
	m := *s
	if m == nil {
		m = map[string]CheckHealthServiceUnavailableInfoItem{}
		*s = m
	}
	return m
}

type CheckHealthServiceUnavailableInfoItem struct {
	Status          OptString `json:"status"`
	AdditionalProps CheckHealthServiceUnavailableInfoItemAdditional
}

// GetStatus returns the value of Status.
func (s *CheckHealthServiceUnavailableInfoItem) GetStatus() OptString {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableInfoItem) GetAdditionalProps() CheckHealthServiceUnavailableInfoItemAdditional {
	return s.AdditionalProps
}

// SetStatus sets the value of Status.
func (s *CheckHealthServiceUnavailableInfoItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *CheckHealthServiceUnavailableInfoItem) SetAdditionalProps(val CheckHealthServiceUnavailableInfoItemAdditional) {
	s.AdditionalProps = val
}

type CheckHealthServiceUnavailableInfoItemAdditional map[string]string

func (s *CheckHealthServiceUnavailableInfoItemAdditional) init() CheckHealthServiceUnavailableInfoItemAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CredmarkAPIKey struct {
	Token string
}

// GetToken returns the value of Token.
func (s *CredmarkAPIKey) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *CredmarkAPIKey) SetToken(val string) {
	s.Token = val
}

type GetCachedModelResultsOrder string

const (
	GetCachedModelResultsOrderDesc GetCachedModelResultsOrder = "desc"
	GetCachedModelResultsOrderAsc  GetCachedModelResultsOrder = "asc"
)

// AllValues returns all GetCachedModelResultsOrder values.
func (GetCachedModelResultsOrder) AllValues() []GetCachedModelResultsOrder {
	return []GetCachedModelResultsOrder{
		GetCachedModelResultsOrderDesc,
		GetCachedModelResultsOrderAsc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetCachedModelResultsOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetCachedModelResultsOrderDesc:
		return []byte(s), nil
	case GetCachedModelResultsOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetCachedModelResultsOrder) UnmarshalText(data []byte) error {
	switch GetCachedModelResultsOrder(data) {
	case GetCachedModelResultsOrderDesc:
		*s = GetCachedModelResultsOrderDesc
		return nil
	case GetCachedModelResultsOrderAsc:
		*s = GetCachedModelResultsOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDailyModelUsageOKItem struct{}

type GetTopModelsOKItem struct{}

type GetTotalModelUsageOKItem struct{}

// Ref: #/components/schemas/ModelCallStackEntry
type ModelCallStackEntry struct {
	// Short identifying name for the model.
	Slug string `json:"slug"`
	// Version of the model.
	Version string `json:"version"`
	// Context chain id.
	ChainId float64 `json:"chainId"`
	// Context block number.
	BlockNumber float64 `json:"blockNumber"`
	// Human-readable message containing a trace of the code that generated the error.
	Trace OptNilString `json:"trace"`
}

// GetSlug returns the value of Slug.
func (s *ModelCallStackEntry) GetSlug() string {
	return s.Slug
}

// GetVersion returns the value of Version.
func (s *ModelCallStackEntry) GetVersion() string {
	return s.Version
}

// GetChainId returns the value of ChainId.
func (s *ModelCallStackEntry) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ModelCallStackEntry) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetTrace returns the value of Trace.
func (s *ModelCallStackEntry) GetTrace() OptNilString {
	return s.Trace
}

// SetSlug sets the value of Slug.
func (s *ModelCallStackEntry) SetSlug(val string) {
	s.Slug = val
}

// SetVersion sets the value of Version.
func (s *ModelCallStackEntry) SetVersion(val string) {
	s.Version = val
}

// SetChainId sets the value of ChainId.
func (s *ModelCallStackEntry) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ModelCallStackEntry) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetTrace sets the value of Trace.
func (s *ModelCallStackEntry) SetTrace(val OptNilString) {
	s.Trace = val
}

// Ref: #/components/schemas/ModelDeployment
type ModelDeployment struct {
	// Short identifying name for the model.
	Name string `json:"name"`
	// The version of the model in this deployment.
	Version string `json:"version"`
	// The location of the model.
	Location string `json:"location"`
}

// GetName returns the value of Name.
func (s *ModelDeployment) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *ModelDeployment) GetVersion() string {
	return s.Version
}

// GetLocation returns the value of Location.
func (s *ModelDeployment) GetLocation() string {
	return s.Location
}

// SetName sets the value of Name.
func (s *ModelDeployment) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *ModelDeployment) SetVersion(val string) {
	s.Version = val
}

// SetLocation sets the value of Location.
func (s *ModelDeployment) SetLocation(val string) {
	s.Location = val
}

// Ref: #/components/schemas/ModelMetadata
type ModelMetadata struct {
	// Short identifying name for the model.
	Slug string `json:"slug"`
	// Name of the model.
	DisplayName OptString `json:"displayName"`
	// A short description of the model.
	Description OptString `json:"description"`
	// Latest version of the model.
	LatestVersion OptString `json:"latestVersion"`
	// Name of the developer.
	Developer OptString `json:"developer"`
	// A list of tag strings for the model.
	Tags []string `json:"tags"`
	// The category of the model.
	Category OptString `json:"category"`
	// The subcategory of the model.
	Subcategory OptString `json:"subcategory"`
	// Attributes for the model.
	Attributes *ModelMetadataAttributes `json:"attributes"`
	// Model input JSON schema.
	Input *ModelMetadataInput `json:"input"`
	// Model output JSON schema.
	Output *ModelMetadataOutput `json:"output"`
	// Model error JSON schema.
	Error *ModelMetadataError `json:"error"`
	// Client owner of the model.
	Client OptString `json:"client"`
	// The version of the credmark model framework used in the latest deployment.
	CmfVersion OptString `json:"cmfVersion"`
}

// GetSlug returns the value of Slug.
func (s *ModelMetadata) GetSlug() string {
	return s.Slug
}

// GetDisplayName returns the value of DisplayName.
func (s *ModelMetadata) GetDisplayName() OptString {
	return s.DisplayName
}

// GetDescription returns the value of Description.
func (s *ModelMetadata) GetDescription() OptString {
	return s.Description
}

// GetLatestVersion returns the value of LatestVersion.
func (s *ModelMetadata) GetLatestVersion() OptString {
	return s.LatestVersion
}

// GetDeveloper returns the value of Developer.
func (s *ModelMetadata) GetDeveloper() OptString {
	return s.Developer
}

// GetTags returns the value of Tags.
func (s *ModelMetadata) GetTags() []string {
	return s.Tags
}

// GetCategory returns the value of Category.
func (s *ModelMetadata) GetCategory() OptString {
	return s.Category
}

// GetSubcategory returns the value of Subcategory.
func (s *ModelMetadata) GetSubcategory() OptString {
	return s.Subcategory
}

// GetAttributes returns the value of Attributes.
func (s *ModelMetadata) GetAttributes() *ModelMetadataAttributes {
	return s.Attributes
}

// GetInput returns the value of Input.
func (s *ModelMetadata) GetInput() *ModelMetadataInput {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *ModelMetadata) GetOutput() *ModelMetadataOutput {
	return s.Output
}

// GetError returns the value of Error.
func (s *ModelMetadata) GetError() *ModelMetadataError {
	return s.Error
}

// GetClient returns the value of Client.
func (s *ModelMetadata) GetClient() OptString {
	return s.Client
}

// GetCmfVersion returns the value of CmfVersion.
func (s *ModelMetadata) GetCmfVersion() OptString {
	return s.CmfVersion
}

// SetSlug sets the value of Slug.
func (s *ModelMetadata) SetSlug(val string) {
	s.Slug = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ModelMetadata) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetDescription sets the value of Description.
func (s *ModelMetadata) SetDescription(val OptString) {
	s.Description = val
}

// SetLatestVersion sets the value of LatestVersion.
func (s *ModelMetadata) SetLatestVersion(val OptString) {
	s.LatestVersion = val
}

// SetDeveloper sets the value of Developer.
func (s *ModelMetadata) SetDeveloper(val OptString) {
	s.Developer = val
}

// SetTags sets the value of Tags.
func (s *ModelMetadata) SetTags(val []string) {
	s.Tags = val
}

// SetCategory sets the value of Category.
func (s *ModelMetadata) SetCategory(val OptString) {
	s.Category = val
}

// SetSubcategory sets the value of Subcategory.
func (s *ModelMetadata) SetSubcategory(val OptString) {
	s.Subcategory = val
}

// SetAttributes sets the value of Attributes.
func (s *ModelMetadata) SetAttributes(val *ModelMetadataAttributes) {
	s.Attributes = val
}

// SetInput sets the value of Input.
func (s *ModelMetadata) SetInput(val *ModelMetadataInput) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *ModelMetadata) SetOutput(val *ModelMetadataOutput) {
	s.Output = val
}

// SetError sets the value of Error.
func (s *ModelMetadata) SetError(val *ModelMetadataError) {
	s.Error = val
}

// SetClient sets the value of Client.
func (s *ModelMetadata) SetClient(val OptString) {
	s.Client = val
}

// SetCmfVersion sets the value of CmfVersion.
func (s *ModelMetadata) SetCmfVersion(val OptString) {
	s.CmfVersion = val
}

// Attributes for the model.
type ModelMetadataAttributes struct{}

// Model error JSON schema.
type ModelMetadataError struct{}

// Model input JSON schema.
type ModelMetadataInput struct{}

// Model output JSON schema.
type ModelMetadataOutput struct{}

// Ref: #/components/schemas/ModelRunErrorResponse
type ModelRunErrorResponse struct {
	// Short identifying name for the model.
	Slug string `json:"slug"`
	// Version of the model.
	Version string `json:"version"`
	// Chain id.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// If the model run generated an error, this property will be set and the output property will not
	// exist.
	Error OptModelRunErrorResponseError `json:"error"`
	// Dictionary of model dependencies, model name to version or version list.
	Dependencies ModelRunErrorResponseDependencies `json:"dependencies"`
	// Whether it is a cached result.
	Cached bool `json:"cached"`
	// Running time of the model in milliseconds.
	Runtime float64 `json:"runtime"`
}

// GetSlug returns the value of Slug.
func (s *ModelRunErrorResponse) GetSlug() string {
	return s.Slug
}

// GetVersion returns the value of Version.
func (s *ModelRunErrorResponse) GetVersion() string {
	return s.Version
}

// GetChainId returns the value of ChainId.
func (s *ModelRunErrorResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ModelRunErrorResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *ModelRunErrorResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetError returns the value of Error.
func (s *ModelRunErrorResponse) GetError() OptModelRunErrorResponseError {
	return s.Error
}

// GetDependencies returns the value of Dependencies.
func (s *ModelRunErrorResponse) GetDependencies() ModelRunErrorResponseDependencies {
	return s.Dependencies
}

// GetCached returns the value of Cached.
func (s *ModelRunErrorResponse) GetCached() bool {
	return s.Cached
}

// GetRuntime returns the value of Runtime.
func (s *ModelRunErrorResponse) GetRuntime() float64 {
	return s.Runtime
}

// SetSlug sets the value of Slug.
func (s *ModelRunErrorResponse) SetSlug(val string) {
	s.Slug = val
}

// SetVersion sets the value of Version.
func (s *ModelRunErrorResponse) SetVersion(val string) {
	s.Version = val
}

// SetChainId sets the value of ChainId.
func (s *ModelRunErrorResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ModelRunErrorResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *ModelRunErrorResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetError sets the value of Error.
func (s *ModelRunErrorResponse) SetError(val OptModelRunErrorResponseError) {
	s.Error = val
}

// SetDependencies sets the value of Dependencies.
func (s *ModelRunErrorResponse) SetDependencies(val ModelRunErrorResponseDependencies) {
	s.Dependencies = val
}

// SetCached sets the value of Cached.
func (s *ModelRunErrorResponse) SetCached(val bool) {
	s.Cached = val
}

// SetRuntime sets the value of Runtime.
func (s *ModelRunErrorResponse) SetRuntime(val float64) {
	s.Runtime = val
}

// Dictionary of model dependencies, model name to version or version list.
type ModelRunErrorResponseDependencies struct{}

type ModelRunErrorResponseError struct {
	// Short identifying name for type of error.
	Type string `json:"type"`
	// A descriptive message about the error.
	Message string `json:"message"`
	// A short string, values to specific to the error type.
	Code string `json:"code"`
	// An object or null. Some errors may have a detail object containing error-specific data.
	Detail *ModelRunErrorResponseErrorDetail `json:"detail"`
	// If true the error is considered deterministically permanent, for example a requested item does not
	// exist on the blockchain within the context of a particular block.
	Permanent bool                  `json:"permanent"`
	Stack     []ModelCallStackEntry `json:"stack"`
}

// GetType returns the value of Type.
func (s *ModelRunErrorResponseError) GetType() string {
	return s.Type
}

// GetMessage returns the value of Message.
func (s *ModelRunErrorResponseError) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s *ModelRunErrorResponseError) GetCode() string {
	return s.Code
}

// GetDetail returns the value of Detail.
func (s *ModelRunErrorResponseError) GetDetail() *ModelRunErrorResponseErrorDetail {
	return s.Detail
}

// GetPermanent returns the value of Permanent.
func (s *ModelRunErrorResponseError) GetPermanent() bool {
	return s.Permanent
}

// GetStack returns the value of Stack.
func (s *ModelRunErrorResponseError) GetStack() []ModelCallStackEntry {
	return s.Stack
}

// SetType sets the value of Type.
func (s *ModelRunErrorResponseError) SetType(val string) {
	s.Type = val
}

// SetMessage sets the value of Message.
func (s *ModelRunErrorResponseError) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ModelRunErrorResponseError) SetCode(val string) {
	s.Code = val
}

// SetDetail sets the value of Detail.
func (s *ModelRunErrorResponseError) SetDetail(val *ModelRunErrorResponseErrorDetail) {
	s.Detail = val
}

// SetPermanent sets the value of Permanent.
func (s *ModelRunErrorResponseError) SetPermanent(val bool) {
	s.Permanent = val
}

// SetStack sets the value of Stack.
func (s *ModelRunErrorResponseError) SetStack(val []ModelCallStackEntry) {
	s.Stack = val
}

// An object or null. Some errors may have a detail object containing error-specific data.
type ModelRunErrorResponseErrorDetail struct{}

// ModelRunErrorResponseStatusCode wraps ModelRunErrorResponse with StatusCode.
type ModelRunErrorResponseStatusCode struct {
	StatusCode int
	Response   ModelRunErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ModelRunErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ModelRunErrorResponseStatusCode) GetResponse() ModelRunErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ModelRunErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ModelRunErrorResponseStatusCode) SetResponse(val ModelRunErrorResponse) {
	s.Response = val
}

func (*ModelRunErrorResponseStatusCode) runModelRes() {}

// Ref: #/components/schemas/ModelRunResponse
type ModelRunResponse struct {
	// Short identifying name for the model.
	Slug string `json:"slug"`
	// Version of the model.
	Version string `json:"version"`
	// Chain id.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Data generated by the model. An object, the contents of which are specific to the model.
	Output ModelRunResponseOutput `json:"output"`
	// Dictionary of model dependencies, model name to version or version list.
	Dependencies ModelRunResponseDependencies `json:"dependencies"`
	// Whether it is a cached result.
	Cached bool `json:"cached"`
	// Running time of the model in milliseconds.
	Runtime float64 `json:"runtime"`
}

// GetSlug returns the value of Slug.
func (s *ModelRunResponse) GetSlug() string {
	return s.Slug
}

// GetVersion returns the value of Version.
func (s *ModelRunResponse) GetVersion() string {
	return s.Version
}

// GetChainId returns the value of ChainId.
func (s *ModelRunResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ModelRunResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *ModelRunResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetOutput returns the value of Output.
func (s *ModelRunResponse) GetOutput() ModelRunResponseOutput {
	return s.Output
}

// GetDependencies returns the value of Dependencies.
func (s *ModelRunResponse) GetDependencies() ModelRunResponseDependencies {
	return s.Dependencies
}

// GetCached returns the value of Cached.
func (s *ModelRunResponse) GetCached() bool {
	return s.Cached
}

// GetRuntime returns the value of Runtime.
func (s *ModelRunResponse) GetRuntime() float64 {
	return s.Runtime
}

// SetSlug sets the value of Slug.
func (s *ModelRunResponse) SetSlug(val string) {
	s.Slug = val
}

// SetVersion sets the value of Version.
func (s *ModelRunResponse) SetVersion(val string) {
	s.Version = val
}

// SetChainId sets the value of ChainId.
func (s *ModelRunResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ModelRunResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *ModelRunResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetOutput sets the value of Output.
func (s *ModelRunResponse) SetOutput(val ModelRunResponseOutput) {
	s.Output = val
}

// SetDependencies sets the value of Dependencies.
func (s *ModelRunResponse) SetDependencies(val ModelRunResponseDependencies) {
	s.Dependencies = val
}

// SetCached sets the value of Cached.
func (s *ModelRunResponse) SetCached(val bool) {
	s.Cached = val
}

// SetRuntime sets the value of Runtime.
func (s *ModelRunResponse) SetRuntime(val float64) {
	s.Runtime = val
}

func (*ModelRunResponse) runModelRes() {}

// Dictionary of model dependencies, model name to version or version list.
type ModelRunResponseDependencies struct{}

// Data generated by the model. An object, the contents of which are specific to the model.
type ModelRunResponseOutput struct{}

// Ref: #/components/schemas/ModelRuntimeStatistics
type ModelRuntimeStatistics struct {
	// Short identifying name for the model.
	Slug string `json:"slug"`
	// Version of the model.
	Version string `json:"version"`
	// Minimum model runtime in milliseconds.
	Min float64 `json:"min"`
	// Maximum model runtime in milliseconds.
	Max float64 `json:"max"`
	// Mean (average) model runtime in milliseconds.
	Mean float64 `json:"mean"`
	// Median model runtime in milliseconds.
	Median float64 `json:"median"`
}

// GetSlug returns the value of Slug.
func (s *ModelRuntimeStatistics) GetSlug() string {
	return s.Slug
}

// GetVersion returns the value of Version.
func (s *ModelRuntimeStatistics) GetVersion() string {
	return s.Version
}

// GetMin returns the value of Min.
func (s *ModelRuntimeStatistics) GetMin() float64 {
	return s.Min
}

// GetMax returns the value of Max.
func (s *ModelRuntimeStatistics) GetMax() float64 {
	return s.Max
}

// GetMean returns the value of Mean.
func (s *ModelRuntimeStatistics) GetMean() float64 {
	return s.Mean
}

// GetMedian returns the value of Median.
func (s *ModelRuntimeStatistics) GetMedian() float64 {
	return s.Median
}

// SetSlug sets the value of Slug.
func (s *ModelRuntimeStatistics) SetSlug(val string) {
	s.Slug = val
}

// SetVersion sets the value of Version.
func (s *ModelRuntimeStatistics) SetVersion(val string) {
	s.Version = val
}

// SetMin sets the value of Min.
func (s *ModelRuntimeStatistics) SetMin(val float64) {
	s.Min = val
}

// SetMax sets the value of Max.
func (s *ModelRuntimeStatistics) SetMax(val float64) {
	s.Max = val
}

// SetMean sets the value of Mean.
func (s *ModelRuntimeStatistics) SetMean(val float64) {
	s.Mean = val
}

// SetMedian sets the value of Median.
func (s *ModelRuntimeStatistics) SetMedian(val float64) {
	s.Median = val
}

// Ref: #/components/schemas/ModelRuntimeStatsResponse
type ModelRuntimeStatsResponse struct {
	Runtimes []ModelRuntimeStatistics `json:"runtimes"`
}

// GetRuntimes returns the value of Runtimes.
func (s *ModelRuntimeStatsResponse) GetRuntimes() []ModelRuntimeStatistics {
	return s.Runtimes
}

// SetRuntimes sets the value of Runtimes.
func (s *ModelRuntimeStatsResponse) SetRuntimes(val []ModelRuntimeStatistics) {
	s.Runtimes = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCheckHealthOKDetails returns new OptCheckHealthOKDetails with value set to v.
func NewOptCheckHealthOKDetails(v CheckHealthOKDetails) OptCheckHealthOKDetails {
	return OptCheckHealthOKDetails{
		Value: v,
		Set:   true,
	}
}

// OptCheckHealthOKDetails is optional CheckHealthOKDetails.
type OptCheckHealthOKDetails struct {
	Value CheckHealthOKDetails
	Set   bool
}

// IsSet returns true if OptCheckHealthOKDetails was set.
func (o OptCheckHealthOKDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCheckHealthOKDetails) Reset() {
	var v CheckHealthOKDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCheckHealthOKDetails) SetTo(v CheckHealthOKDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCheckHealthOKDetails) Get() (v CheckHealthOKDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCheckHealthOKDetails) Or(d CheckHealthOKDetails) CheckHealthOKDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCheckHealthServiceUnavailableDetails returns new OptCheckHealthServiceUnavailableDetails with value set to v.
func NewOptCheckHealthServiceUnavailableDetails(v CheckHealthServiceUnavailableDetails) OptCheckHealthServiceUnavailableDetails {
	return OptCheckHealthServiceUnavailableDetails{
		Value: v,
		Set:   true,
	}
}

// OptCheckHealthServiceUnavailableDetails is optional CheckHealthServiceUnavailableDetails.
type OptCheckHealthServiceUnavailableDetails struct {
	Value CheckHealthServiceUnavailableDetails
	Set   bool
}

// IsSet returns true if OptCheckHealthServiceUnavailableDetails was set.
func (o OptCheckHealthServiceUnavailableDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCheckHealthServiceUnavailableDetails) Reset() {
	var v CheckHealthServiceUnavailableDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCheckHealthServiceUnavailableDetails) SetTo(v CheckHealthServiceUnavailableDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCheckHealthServiceUnavailableDetails) Get() (v CheckHealthServiceUnavailableDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCheckHealthServiceUnavailableDetails) Or(d CheckHealthServiceUnavailableDetails) CheckHealthServiceUnavailableDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCachedModelResultsOrder returns new OptGetCachedModelResultsOrder with value set to v.
func NewOptGetCachedModelResultsOrder(v GetCachedModelResultsOrder) OptGetCachedModelResultsOrder {
	return OptGetCachedModelResultsOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetCachedModelResultsOrder is optional GetCachedModelResultsOrder.
type OptGetCachedModelResultsOrder struct {
	Value GetCachedModelResultsOrder
	Set   bool
}

// IsSet returns true if OptGetCachedModelResultsOrder was set.
func (o OptGetCachedModelResultsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCachedModelResultsOrder) Reset() {
	var v GetCachedModelResultsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCachedModelResultsOrder) SetTo(v GetCachedModelResultsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCachedModelResultsOrder) Get() (v GetCachedModelResultsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCachedModelResultsOrder) Or(d GetCachedModelResultsOrder) GetCachedModelResultsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModelRunErrorResponseError returns new OptModelRunErrorResponseError with value set to v.
func NewOptModelRunErrorResponseError(v ModelRunErrorResponseError) OptModelRunErrorResponseError {
	return OptModelRunErrorResponseError{
		Value: v,
		Set:   true,
	}
}

// OptModelRunErrorResponseError is optional ModelRunErrorResponseError.
type OptModelRunErrorResponseError struct {
	Value ModelRunErrorResponseError
	Set   bool
}

// IsSet returns true if OptModelRunErrorResponseError was set.
func (o OptModelRunErrorResponseError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModelRunErrorResponseError) Reset() {
	var v ModelRunErrorResponseError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModelRunErrorResponseError) SetTo(v ModelRunErrorResponseError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModelRunErrorResponseError) Get() (v ModelRunErrorResponseError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModelRunErrorResponseError) Or(d ModelRunErrorResponseError) ModelRunErrorResponseError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCheckHealthOKError returns new OptNilCheckHealthOKError with value set to v.
func NewOptNilCheckHealthOKError(v CheckHealthOKError) OptNilCheckHealthOKError {
	return OptNilCheckHealthOKError{
		Value: v,
		Set:   true,
	}
}

// OptNilCheckHealthOKError is optional nullable CheckHealthOKError.
type OptNilCheckHealthOKError struct {
	Value CheckHealthOKError
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCheckHealthOKError was set.
func (o OptNilCheckHealthOKError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCheckHealthOKError) Reset() {
	var v CheckHealthOKError
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCheckHealthOKError) SetTo(v CheckHealthOKError) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCheckHealthOKError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCheckHealthOKError) SetToNull() {
	o.Set = true
	o.Null = true
	var v CheckHealthOKError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCheckHealthOKError) Get() (v CheckHealthOKError, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCheckHealthOKError) Or(d CheckHealthOKError) CheckHealthOKError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCheckHealthOKInfo returns new OptNilCheckHealthOKInfo with value set to v.
func NewOptNilCheckHealthOKInfo(v CheckHealthOKInfo) OptNilCheckHealthOKInfo {
	return OptNilCheckHealthOKInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilCheckHealthOKInfo is optional nullable CheckHealthOKInfo.
type OptNilCheckHealthOKInfo struct {
	Value CheckHealthOKInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCheckHealthOKInfo was set.
func (o OptNilCheckHealthOKInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCheckHealthOKInfo) Reset() {
	var v CheckHealthOKInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCheckHealthOKInfo) SetTo(v CheckHealthOKInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCheckHealthOKInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCheckHealthOKInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v CheckHealthOKInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCheckHealthOKInfo) Get() (v CheckHealthOKInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCheckHealthOKInfo) Or(d CheckHealthOKInfo) CheckHealthOKInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCheckHealthServiceUnavailableError returns new OptNilCheckHealthServiceUnavailableError with value set to v.
func NewOptNilCheckHealthServiceUnavailableError(v CheckHealthServiceUnavailableError) OptNilCheckHealthServiceUnavailableError {
	return OptNilCheckHealthServiceUnavailableError{
		Value: v,
		Set:   true,
	}
}

// OptNilCheckHealthServiceUnavailableError is optional nullable CheckHealthServiceUnavailableError.
type OptNilCheckHealthServiceUnavailableError struct {
	Value CheckHealthServiceUnavailableError
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCheckHealthServiceUnavailableError was set.
func (o OptNilCheckHealthServiceUnavailableError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCheckHealthServiceUnavailableError) Reset() {
	var v CheckHealthServiceUnavailableError
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCheckHealthServiceUnavailableError) SetTo(v CheckHealthServiceUnavailableError) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCheckHealthServiceUnavailableError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCheckHealthServiceUnavailableError) SetToNull() {
	o.Set = true
	o.Null = true
	var v CheckHealthServiceUnavailableError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCheckHealthServiceUnavailableError) Get() (v CheckHealthServiceUnavailableError, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCheckHealthServiceUnavailableError) Or(d CheckHealthServiceUnavailableError) CheckHealthServiceUnavailableError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCheckHealthServiceUnavailableInfo returns new OptNilCheckHealthServiceUnavailableInfo with value set to v.
func NewOptNilCheckHealthServiceUnavailableInfo(v CheckHealthServiceUnavailableInfo) OptNilCheckHealthServiceUnavailableInfo {
	return OptNilCheckHealthServiceUnavailableInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilCheckHealthServiceUnavailableInfo is optional nullable CheckHealthServiceUnavailableInfo.
type OptNilCheckHealthServiceUnavailableInfo struct {
	Value CheckHealthServiceUnavailableInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCheckHealthServiceUnavailableInfo was set.
func (o OptNilCheckHealthServiceUnavailableInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCheckHealthServiceUnavailableInfo) Reset() {
	var v CheckHealthServiceUnavailableInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCheckHealthServiceUnavailableInfo) SetTo(v CheckHealthServiceUnavailableInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCheckHealthServiceUnavailableInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCheckHealthServiceUnavailableInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v CheckHealthServiceUnavailableInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCheckHealthServiceUnavailableInfo) Get() (v CheckHealthServiceUnavailableInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCheckHealthServiceUnavailableInfo) Or(d CheckHealthServiceUnavailableInfo) CheckHealthServiceUnavailableInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PortfolioErrorResponse
type PortfolioErrorResponse struct {
	// If an error response (non-200 status code), the status code will be set.
	StatusCode float64 `json:"statusCode"`
	// If an error response (non-200 status code), the error will be set with a short string for the code.
	Error string `json:"error"`
	// If an error response (non-200 status code), the message will be set with an error message. It can
	// either be a string or a list of strings.
	Message PortfolioErrorResponseMessage `json:"message"`
}

// GetStatusCode returns the value of StatusCode.
func (s *PortfolioErrorResponse) GetStatusCode() float64 {
	return s.StatusCode
}

// GetError returns the value of Error.
func (s *PortfolioErrorResponse) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *PortfolioErrorResponse) GetMessage() PortfolioErrorResponseMessage {
	return s.Message
}

// SetStatusCode sets the value of StatusCode.
func (s *PortfolioErrorResponse) SetStatusCode(val float64) {
	s.StatusCode = val
}

// SetError sets the value of Error.
func (s *PortfolioErrorResponse) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *PortfolioErrorResponse) SetMessage(val PortfolioErrorResponseMessage) {
	s.Message = val
}

func (*PortfolioErrorResponse) getPositionsHistoricalRes() {}
func (*PortfolioErrorResponse) getPositionsRes()           {}
func (*PortfolioErrorResponse) getReturnsRes()             {}
func (*PortfolioErrorResponse) getValueHistoricalRes()     {}
func (*PortfolioErrorResponse) getValueRes()               {}

// If an error response (non-200 status code), the message will be set with an error message. It can
// either be a string or a list of strings.
// PortfolioErrorResponseMessage represents sum type.
type PortfolioErrorResponseMessage struct {
	Type        PortfolioErrorResponseMessageType // switch on this field
	String      string
	StringArray []string
}

// PortfolioErrorResponseMessageType is oneOf type of PortfolioErrorResponseMessage.
type PortfolioErrorResponseMessageType string

// Possible values for PortfolioErrorResponseMessageType.
const (
	StringPortfolioErrorResponseMessage      PortfolioErrorResponseMessageType = "string"
	StringArrayPortfolioErrorResponseMessage PortfolioErrorResponseMessageType = "[]string"
)

// IsString reports whether PortfolioErrorResponseMessage is string.
func (s PortfolioErrorResponseMessage) IsString() bool {
	return s.Type == StringPortfolioErrorResponseMessage
}

// IsStringArray reports whether PortfolioErrorResponseMessage is []string.
func (s PortfolioErrorResponseMessage) IsStringArray() bool {
	return s.Type == StringArrayPortfolioErrorResponseMessage
}

// SetString sets PortfolioErrorResponseMessage to string.
func (s *PortfolioErrorResponseMessage) SetString(v string) {
	s.Type = StringPortfolioErrorResponseMessage
	s.String = v
}

// GetString returns string and true boolean if PortfolioErrorResponseMessage is string.
func (s PortfolioErrorResponseMessage) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringPortfolioErrorResponseMessage returns new PortfolioErrorResponseMessage from string.
func NewStringPortfolioErrorResponseMessage(v string) PortfolioErrorResponseMessage {
	var s PortfolioErrorResponseMessage
	s.SetString(v)
	return s
}

// SetStringArray sets PortfolioErrorResponseMessage to []string.
func (s *PortfolioErrorResponseMessage) SetStringArray(v []string) {
	s.Type = StringArrayPortfolioErrorResponseMessage
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if PortfolioErrorResponseMessage is []string.
func (s PortfolioErrorResponseMessage) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayPortfolioErrorResponseMessage returns new PortfolioErrorResponseMessage from []string.
func NewStringArrayPortfolioErrorResponseMessage(v []string) PortfolioErrorResponseMessage {
	var s PortfolioErrorResponseMessage
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/Position
type Position struct {
	// Token address.
	TokenAddress string `json:"tokenAddress"`
	// Token balance scaled to token decimals.
	Balance float64 `json:"balance"`
}

// GetTokenAddress returns the value of TokenAddress.
func (s *Position) GetTokenAddress() string {
	return s.TokenAddress
}

// GetBalance returns the value of Balance.
func (s *Position) GetBalance() float64 {
	return s.Balance
}

// SetTokenAddress sets the value of TokenAddress.
func (s *Position) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetBalance sets the value of Balance.
func (s *Position) SetBalance(val float64) {
	s.Balance = val
}

// Ref: #/components/schemas/PositionHistoricalItem
type PositionHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64    `json:"blockTimestamp"`
	Positions      []Position `json:"positions"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *PositionHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *PositionHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetPositions returns the value of Positions.
func (s *PositionHistoricalItem) GetPositions() []Position {
	return s.Positions
}

// SetBlockNumber sets the value of BlockNumber.
func (s *PositionHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *PositionHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetPositions sets the value of Positions.
func (s *PositionHistoricalItem) SetPositions(val []Position) {
	s.Positions = val
}

// Ref: #/components/schemas/PositionsHistoricalResponse
type PositionsHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Account addresses.
	Accounts []string                 `json:"accounts"`
	Data     []PositionHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *PositionsHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *PositionsHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *PositionsHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *PositionsHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *PositionsHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetAccounts returns the value of Accounts.
func (s *PositionsHistoricalResponse) GetAccounts() []string {
	return s.Accounts
}

// GetData returns the value of Data.
func (s *PositionsHistoricalResponse) GetData() []PositionHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *PositionsHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *PositionsHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *PositionsHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *PositionsHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *PositionsHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetAccounts sets the value of Accounts.
func (s *PositionsHistoricalResponse) SetAccounts(val []string) {
	s.Accounts = val
}

// SetData sets the value of Data.
func (s *PositionsHistoricalResponse) SetData(val []PositionHistoricalItem) {
	s.Data = val
}

func (*PositionsHistoricalResponse) getPositionsHistoricalRes() {}

// Ref: #/components/schemas/PositionsResponse
type PositionsResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Account addresses.
	Accounts  []string   `json:"accounts"`
	Positions []Position `json:"positions"`
}

// GetChainId returns the value of ChainId.
func (s *PositionsResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *PositionsResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *PositionsResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetAccounts returns the value of Accounts.
func (s *PositionsResponse) GetAccounts() []string {
	return s.Accounts
}

// GetPositions returns the value of Positions.
func (s *PositionsResponse) GetPositions() []Position {
	return s.Positions
}

// SetChainId sets the value of ChainId.
func (s *PositionsResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *PositionsResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *PositionsResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetAccounts sets the value of Accounts.
func (s *PositionsResponse) SetAccounts(val []string) {
	s.Accounts = val
}

// SetPositions sets the value of Positions.
func (s *PositionsResponse) SetPositions(val []Position) {
	s.Positions = val
}

func (*PositionsResponse) getPositionsRes() {}

// Ref: #/components/schemas/ReturnsResponse
type ReturnsResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Account addresses.
	Accounts []string `json:"accounts"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string `json:"quoteAddress"`
	// Total return of the portfolio.
	TotalReturn float64       `json:"totalReturn"`
	Returns     []TokenReturn `json:"returns"`
}

// GetChainId returns the value of ChainId.
func (s *ReturnsResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ReturnsResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *ReturnsResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetAccounts returns the value of Accounts.
func (s *ReturnsResponse) GetAccounts() []string {
	return s.Accounts
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *ReturnsResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetTotalReturn returns the value of TotalReturn.
func (s *ReturnsResponse) GetTotalReturn() float64 {
	return s.TotalReturn
}

// GetReturns returns the value of Returns.
func (s *ReturnsResponse) GetReturns() []TokenReturn {
	return s.Returns
}

// SetChainId sets the value of ChainId.
func (s *ReturnsResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ReturnsResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *ReturnsResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetAccounts sets the value of Accounts.
func (s *ReturnsResponse) SetAccounts(val []string) {
	s.Accounts = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *ReturnsResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetTotalReturn sets the value of TotalReturn.
func (s *ReturnsResponse) SetTotalReturn(val float64) {
	s.TotalReturn = val
}

// SetReturns sets the value of Returns.
func (s *ReturnsResponse) SetReturns(val []TokenReturn) {
	s.Returns = val
}

func (*ReturnsResponse) getReturnsRes() {}

// Ref: #/components/schemas/RunModelDto
type RunModelDto struct {
	// Slug of the model to run.
	Slug string `json:"slug"`
	// Typically not required but you may specify version of the model to run.
	Version OptString `json:"version"`
	// ChainId number, for example 1 for mainnet.
	ChainId int `json:"chainId"`
	// BlockNumber is a number, a number as string, 'latest' or 'earliest'.
	BlockNumber RunModelDtoBlockNumber `json:"blockNumber"`
	// Model input data.
	Input RunModelDtoInput `json:"input"`
}

// GetSlug returns the value of Slug.
func (s *RunModelDto) GetSlug() string {
	return s.Slug
}

// GetVersion returns the value of Version.
func (s *RunModelDto) GetVersion() OptString {
	return s.Version
}

// GetChainId returns the value of ChainId.
func (s *RunModelDto) GetChainId() int {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *RunModelDto) GetBlockNumber() RunModelDtoBlockNumber {
	return s.BlockNumber
}

// GetInput returns the value of Input.
func (s *RunModelDto) GetInput() RunModelDtoInput {
	return s.Input
}

// SetSlug sets the value of Slug.
func (s *RunModelDto) SetSlug(val string) {
	s.Slug = val
}

// SetVersion sets the value of Version.
func (s *RunModelDto) SetVersion(val OptString) {
	s.Version = val
}

// SetChainId sets the value of ChainId.
func (s *RunModelDto) SetChainId(val int) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *RunModelDto) SetBlockNumber(val RunModelDtoBlockNumber) {
	s.BlockNumber = val
}

// SetInput sets the value of Input.
func (s *RunModelDto) SetInput(val RunModelDtoInput) {
	s.Input = val
}

// BlockNumber is a number, a number as string, 'latest' or 'earliest'.
// RunModelDtoBlockNumber represents sum type.
type RunModelDtoBlockNumber struct {
	Type                    RunModelDtoBlockNumberType // switch on this field
	Int                     int
	RunModelDtoBlockNumber1 RunModelDtoBlockNumber1
}

// RunModelDtoBlockNumberType is oneOf type of RunModelDtoBlockNumber.
type RunModelDtoBlockNumberType string

// Possible values for RunModelDtoBlockNumberType.
const (
	IntRunModelDtoBlockNumber                     RunModelDtoBlockNumberType = "int"
	RunModelDtoBlockNumber1RunModelDtoBlockNumber RunModelDtoBlockNumberType = "RunModelDtoBlockNumber1"
)

// IsInt reports whether RunModelDtoBlockNumber is int.
func (s RunModelDtoBlockNumber) IsInt() bool { return s.Type == IntRunModelDtoBlockNumber }

// IsRunModelDtoBlockNumber1 reports whether RunModelDtoBlockNumber is RunModelDtoBlockNumber1.
func (s RunModelDtoBlockNumber) IsRunModelDtoBlockNumber1() bool {
	return s.Type == RunModelDtoBlockNumber1RunModelDtoBlockNumber
}

// SetInt sets RunModelDtoBlockNumber to int.
func (s *RunModelDtoBlockNumber) SetInt(v int) {
	s.Type = IntRunModelDtoBlockNumber
	s.Int = v
}

// GetInt returns int and true boolean if RunModelDtoBlockNumber is int.
func (s RunModelDtoBlockNumber) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntRunModelDtoBlockNumber returns new RunModelDtoBlockNumber from int.
func NewIntRunModelDtoBlockNumber(v int) RunModelDtoBlockNumber {
	var s RunModelDtoBlockNumber
	s.SetInt(v)
	return s
}

// SetRunModelDtoBlockNumber1 sets RunModelDtoBlockNumber to RunModelDtoBlockNumber1.
func (s *RunModelDtoBlockNumber) SetRunModelDtoBlockNumber1(v RunModelDtoBlockNumber1) {
	s.Type = RunModelDtoBlockNumber1RunModelDtoBlockNumber
	s.RunModelDtoBlockNumber1 = v
}

// GetRunModelDtoBlockNumber1 returns RunModelDtoBlockNumber1 and true boolean if RunModelDtoBlockNumber is RunModelDtoBlockNumber1.
func (s RunModelDtoBlockNumber) GetRunModelDtoBlockNumber1() (v RunModelDtoBlockNumber1, ok bool) {
	if !s.IsRunModelDtoBlockNumber1() {
		return v, false
	}
	return s.RunModelDtoBlockNumber1, true
}

// NewRunModelDtoBlockNumber1RunModelDtoBlockNumber returns new RunModelDtoBlockNumber from RunModelDtoBlockNumber1.
func NewRunModelDtoBlockNumber1RunModelDtoBlockNumber(v RunModelDtoBlockNumber1) RunModelDtoBlockNumber {
	var s RunModelDtoBlockNumber
	s.SetRunModelDtoBlockNumber1(v)
	return s
}

type RunModelDtoBlockNumber1 string

const (
	RunModelDtoBlockNumber1Latest   RunModelDtoBlockNumber1 = "latest"
	RunModelDtoBlockNumber1Earliest RunModelDtoBlockNumber1 = "earliest"
)

// AllValues returns all RunModelDtoBlockNumber1 values.
func (RunModelDtoBlockNumber1) AllValues() []RunModelDtoBlockNumber1 {
	return []RunModelDtoBlockNumber1{
		RunModelDtoBlockNumber1Latest,
		RunModelDtoBlockNumber1Earliest,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunModelDtoBlockNumber1) MarshalText() ([]byte, error) {
	switch s {
	case RunModelDtoBlockNumber1Latest:
		return []byte(s), nil
	case RunModelDtoBlockNumber1Earliest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunModelDtoBlockNumber1) UnmarshalText(data []byte) error {
	switch RunModelDtoBlockNumber1(data) {
	case RunModelDtoBlockNumber1Latest:
		*s = RunModelDtoBlockNumber1Latest
		return nil
	case RunModelDtoBlockNumber1Earliest:
		*s = RunModelDtoBlockNumber1Earliest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Model input data.
type RunModelDtoInput struct{}

// Ref: #/components/schemas/TokenAbiResponse
type TokenAbiResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token ABI.
	Abi []TokenAbiResponseAbiItem `json:"abi"`
	// Whether the contract is using transparent proxy pattern.
	IsTransparentProxy bool `json:"isTransparentProxy"`
	// Address of proxy contract's implementation. It is only set when the contract is implemented via
	// proxy contract.
	ProxyImplementationAddress OptString `json:"proxyImplementationAddress"`
}

// GetChainId returns the value of ChainId.
func (s *TokenAbiResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenAbiResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenAbiResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenAbiResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetAbi returns the value of Abi.
func (s *TokenAbiResponse) GetAbi() []TokenAbiResponseAbiItem {
	return s.Abi
}

// GetIsTransparentProxy returns the value of IsTransparentProxy.
func (s *TokenAbiResponse) GetIsTransparentProxy() bool {
	return s.IsTransparentProxy
}

// GetProxyImplementationAddress returns the value of ProxyImplementationAddress.
func (s *TokenAbiResponse) GetProxyImplementationAddress() OptString {
	return s.ProxyImplementationAddress
}

// SetChainId sets the value of ChainId.
func (s *TokenAbiResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenAbiResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenAbiResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenAbiResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetAbi sets the value of Abi.
func (s *TokenAbiResponse) SetAbi(val []TokenAbiResponseAbiItem) {
	s.Abi = val
}

// SetIsTransparentProxy sets the value of IsTransparentProxy.
func (s *TokenAbiResponse) SetIsTransparentProxy(val bool) {
	s.IsTransparentProxy = val
}

// SetProxyImplementationAddress sets the value of ProxyImplementationAddress.
func (s *TokenAbiResponse) SetProxyImplementationAddress(val OptString) {
	s.ProxyImplementationAddress = val
}

func (*TokenAbiResponse) getTokenAbiRes() {}

type TokenAbiResponseAbiItem struct{}

// Ref: #/components/schemas/TokenBalanceHistoricalItem
type TokenBalanceHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token balance.
	Balance float64 `json:"balance"`
	// Token value in quoted currency.
	Value float64 `json:"value"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenBalanceHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenBalanceHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetBalance returns the value of Balance.
func (s *TokenBalanceHistoricalItem) GetBalance() float64 {
	return s.Balance
}

// GetValue returns the value of Value.
func (s *TokenBalanceHistoricalItem) GetValue() float64 {
	return s.Value
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenBalanceHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenBalanceHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetBalance sets the value of Balance.
func (s *TokenBalanceHistoricalItem) SetBalance(val float64) {
	s.Balance = val
}

// SetValue sets the value of Value.
func (s *TokenBalanceHistoricalItem) SetValue(val float64) {
	s.Value = val
}

// Ref: #/components/schemas/TokenBalanceHistoricalResponse
type TokenBalanceHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the balance is scaled by token decimals.
	Scaled bool `json:"scaled"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string                       `json:"quoteAddress"`
	Data         []TokenBalanceHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *TokenBalanceHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenBalanceHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenBalanceHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenBalanceHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenBalanceHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenBalanceHistoricalResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenBalanceHistoricalResponse) GetScaled() bool {
	return s.Scaled
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *TokenBalanceHistoricalResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetData returns the value of Data.
func (s *TokenBalanceHistoricalResponse) GetData() []TokenBalanceHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *TokenBalanceHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenBalanceHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenBalanceHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenBalanceHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenBalanceHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenBalanceHistoricalResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenBalanceHistoricalResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *TokenBalanceHistoricalResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetData sets the value of Data.
func (s *TokenBalanceHistoricalResponse) SetData(val []TokenBalanceHistoricalItem) {
	s.Data = val
}

func (*TokenBalanceHistoricalResponse) getTokenBalanceHistoricalRes() {}

// Ref: #/components/schemas/TokenBalanceResponse
type TokenBalanceResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the balance is scaled by token decimals.
	Scaled bool `json:"scaled"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string `json:"quoteAddress"`
	// Token balance.
	Balance float64 `json:"balance"`
	// Token value in quoted currency.
	Value float64 `json:"value"`
}

// GetChainId returns the value of ChainId.
func (s *TokenBalanceResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenBalanceResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenBalanceResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenBalanceResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenBalanceResponse) GetScaled() bool {
	return s.Scaled
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *TokenBalanceResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetBalance returns the value of Balance.
func (s *TokenBalanceResponse) GetBalance() float64 {
	return s.Balance
}

// GetValue returns the value of Value.
func (s *TokenBalanceResponse) GetValue() float64 {
	return s.Value
}

// SetChainId sets the value of ChainId.
func (s *TokenBalanceResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenBalanceResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenBalanceResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenBalanceResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenBalanceResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *TokenBalanceResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetBalance sets the value of Balance.
func (s *TokenBalanceResponse) SetBalance(val float64) {
	s.Balance = val
}

// SetValue sets the value of Value.
func (s *TokenBalanceResponse) SetValue(val float64) {
	s.Value = val
}

func (*TokenBalanceResponse) getTokenBalanceRes() {}

// Ref: #/components/schemas/TokenCreationBlockResponse
type TokenCreationBlockResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token creation block number.
	CreationBlock float64 `json:"creationBlock"`
}

// GetChainId returns the value of ChainId.
func (s *TokenCreationBlockResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenCreationBlockResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenCreationBlockResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenCreationBlockResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetCreationBlock returns the value of CreationBlock.
func (s *TokenCreationBlockResponse) GetCreationBlock() float64 {
	return s.CreationBlock
}

// SetChainId sets the value of ChainId.
func (s *TokenCreationBlockResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenCreationBlockResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenCreationBlockResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenCreationBlockResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetCreationBlock sets the value of CreationBlock.
func (s *TokenCreationBlockResponse) SetCreationBlock(val float64) {
	s.CreationBlock = val
}

func (*TokenCreationBlockResponse) getTokenCreationBlockRes() {}

// Ref: #/components/schemas/TokenDecimalsResponse
type TokenDecimalsResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token decimals.
	Decimals float64 `json:"decimals"`
}

// GetChainId returns the value of ChainId.
func (s *TokenDecimalsResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenDecimalsResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenDecimalsResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenDecimalsResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetDecimals returns the value of Decimals.
func (s *TokenDecimalsResponse) GetDecimals() float64 {
	return s.Decimals
}

// SetChainId sets the value of ChainId.
func (s *TokenDecimalsResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenDecimalsResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenDecimalsResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenDecimalsResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetDecimals sets the value of Decimals.
func (s *TokenDecimalsResponse) SetDecimals(val float64) {
	s.Decimals = val
}

func (*TokenDecimalsResponse) getTokenDecimalsRes() {}

// Ref: #/components/schemas/TokenErrorResponse
type TokenErrorResponse struct {
	// If an error response (non-200 status code), the status code will be set.
	StatusCode float64 `json:"statusCode"`
	// If an error response (non-200 status code), the error will be set with a short string for the code.
	Error string `json:"error"`
	// If an error response (non-200 status code), the message will be set with an error message. It can
	// either be a string or a list of strings.
	Message TokenErrorResponseMessage `json:"message"`
}

// GetStatusCode returns the value of StatusCode.
func (s *TokenErrorResponse) GetStatusCode() float64 {
	return s.StatusCode
}

// GetError returns the value of Error.
func (s *TokenErrorResponse) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *TokenErrorResponse) GetMessage() TokenErrorResponseMessage {
	return s.Message
}

// SetStatusCode sets the value of StatusCode.
func (s *TokenErrorResponse) SetStatusCode(val float64) {
	s.StatusCode = val
}

// SetError sets the value of Error.
func (s *TokenErrorResponse) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *TokenErrorResponse) SetMessage(val TokenErrorResponseMessage) {
	s.Message = val
}

func (*TokenErrorResponse) getTokenAbiRes()                    {}
func (*TokenErrorResponse) getTokenBalanceHistoricalRes()      {}
func (*TokenErrorResponse) getTokenBalanceRes()                {}
func (*TokenErrorResponse) getTokenCreationBlockRes()          {}
func (*TokenErrorResponse) getTokenDecimalsRes()               {}
func (*TokenErrorResponse) getTokenHoldersCountHistoricalRes() {}
func (*TokenErrorResponse) getTokenHoldersCountRes()           {}
func (*TokenErrorResponse) getTokenHoldersRes()                {}
func (*TokenErrorResponse) getTokenLogoRes()                   {}
func (*TokenErrorResponse) getTokenMetadataRes()               {}
func (*TokenErrorResponse) getTokenNameRes()                   {}
func (*TokenErrorResponse) getTokenPriceHistoricalRes()        {}
func (*TokenErrorResponse) getTokenPriceRes()                  {}
func (*TokenErrorResponse) getTokenSymbolRes()                 {}
func (*TokenErrorResponse) getTokenTotalSupplyHistoricalRes()  {}
func (*TokenErrorResponse) getTokenTotalSupplyRes()            {}
func (*TokenErrorResponse) getTokenVolumeHistoricalRes()       {}
func (*TokenErrorResponse) getTokenVolumeRes()                 {}

// If an error response (non-200 status code), the message will be set with an error message. It can
// either be a string or a list of strings.
// TokenErrorResponseMessage represents sum type.
type TokenErrorResponseMessage struct {
	Type        TokenErrorResponseMessageType // switch on this field
	String      string
	StringArray []string
}

// TokenErrorResponseMessageType is oneOf type of TokenErrorResponseMessage.
type TokenErrorResponseMessageType string

// Possible values for TokenErrorResponseMessageType.
const (
	StringTokenErrorResponseMessage      TokenErrorResponseMessageType = "string"
	StringArrayTokenErrorResponseMessage TokenErrorResponseMessageType = "[]string"
)

// IsString reports whether TokenErrorResponseMessage is string.
func (s TokenErrorResponseMessage) IsString() bool { return s.Type == StringTokenErrorResponseMessage }

// IsStringArray reports whether TokenErrorResponseMessage is []string.
func (s TokenErrorResponseMessage) IsStringArray() bool {
	return s.Type == StringArrayTokenErrorResponseMessage
}

// SetString sets TokenErrorResponseMessage to string.
func (s *TokenErrorResponseMessage) SetString(v string) {
	s.Type = StringTokenErrorResponseMessage
	s.String = v
}

// GetString returns string and true boolean if TokenErrorResponseMessage is string.
func (s TokenErrorResponseMessage) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringTokenErrorResponseMessage returns new TokenErrorResponseMessage from string.
func NewStringTokenErrorResponseMessage(v string) TokenErrorResponseMessage {
	var s TokenErrorResponseMessage
	s.SetString(v)
	return s
}

// SetStringArray sets TokenErrorResponseMessage to []string.
func (s *TokenErrorResponseMessage) SetStringArray(v []string) {
	s.Type = StringArrayTokenErrorResponseMessage
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if TokenErrorResponseMessage is []string.
func (s TokenErrorResponseMessage) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayTokenErrorResponseMessage returns new TokenErrorResponseMessage from []string.
func NewStringArrayTokenErrorResponseMessage(v []string) TokenErrorResponseMessage {
	var s TokenErrorResponseMessage
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/TokenHistoricalHoldersCountResponse
type TokenHistoricalHoldersCountResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string                            `json:"tokenAddress"`
	Data         []TokenHoldersCountHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *TokenHistoricalHoldersCountResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenHistoricalHoldersCountResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenHistoricalHoldersCountResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenHistoricalHoldersCountResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenHistoricalHoldersCountResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenHistoricalHoldersCountResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetData returns the value of Data.
func (s *TokenHistoricalHoldersCountResponse) GetData() []TokenHoldersCountHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *TokenHistoricalHoldersCountResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenHistoricalHoldersCountResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenHistoricalHoldersCountResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenHistoricalHoldersCountResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenHistoricalHoldersCountResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenHistoricalHoldersCountResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetData sets the value of Data.
func (s *TokenHistoricalHoldersCountResponse) SetData(val []TokenHoldersCountHistoricalItem) {
	s.Data = val
}

func (*TokenHistoricalHoldersCountResponse) getTokenHoldersCountHistoricalRes() {}

// Ref: #/components/schemas/TokenHolder
type TokenHolder struct {
	// Account address.
	Address string `json:"address"`
	// Token balance.
	Balance float64 `json:"balance"`
	// Token value in quoted currency.
	Value float64 `json:"value"`
}

// GetAddress returns the value of Address.
func (s *TokenHolder) GetAddress() string {
	return s.Address
}

// GetBalance returns the value of Balance.
func (s *TokenHolder) GetBalance() float64 {
	return s.Balance
}

// GetValue returns the value of Value.
func (s *TokenHolder) GetValue() float64 {
	return s.Value
}

// SetAddress sets the value of Address.
func (s *TokenHolder) SetAddress(val string) {
	s.Address = val
}

// SetBalance sets the value of Balance.
func (s *TokenHolder) SetBalance(val float64) {
	s.Balance = val
}

// SetValue sets the value of Value.
func (s *TokenHolder) SetValue(val float64) {
	s.Value = val
}

// Ref: #/components/schemas/TokenHoldersCountHistoricalItem
type TokenHoldersCountHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Total number of holders.
	Count float64 `json:"count"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenHoldersCountHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenHoldersCountHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetCount returns the value of Count.
func (s *TokenHoldersCountHistoricalItem) GetCount() float64 {
	return s.Count
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenHoldersCountHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenHoldersCountHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetCount sets the value of Count.
func (s *TokenHoldersCountHistoricalItem) SetCount(val float64) {
	s.Count = val
}

// Ref: #/components/schemas/TokenHoldersCountResponse
type TokenHoldersCountResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Total number of holders.
	Count float64 `json:"count"`
}

// GetChainId returns the value of ChainId.
func (s *TokenHoldersCountResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenHoldersCountResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenHoldersCountResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenHoldersCountResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetCount returns the value of Count.
func (s *TokenHoldersCountResponse) GetCount() float64 {
	return s.Count
}

// SetChainId sets the value of ChainId.
func (s *TokenHoldersCountResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenHoldersCountResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenHoldersCountResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenHoldersCountResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetCount sets the value of Count.
func (s *TokenHoldersCountResponse) SetCount(val float64) {
	s.Count = val
}

func (*TokenHoldersCountResponse) getTokenHoldersCountRes() {}

// Ref: #/components/schemas/TokenHoldersResponse
type TokenHoldersResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the holders' balance is scaled by token decimals.
	Scaled bool `json:"scaled"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string `json:"quoteAddress"`
	// Paginated list of holders.
	Data []TokenHolder `json:"data"`
	// Total number of holders.
	Total float64 `json:"total"`
	// Cursor to fetch the next page.
	Cursor OptString `json:"cursor"`
}

// GetChainId returns the value of ChainId.
func (s *TokenHoldersResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenHoldersResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenHoldersResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenHoldersResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenHoldersResponse) GetScaled() bool {
	return s.Scaled
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *TokenHoldersResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetData returns the value of Data.
func (s *TokenHoldersResponse) GetData() []TokenHolder {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *TokenHoldersResponse) GetTotal() float64 {
	return s.Total
}

// GetCursor returns the value of Cursor.
func (s *TokenHoldersResponse) GetCursor() OptString {
	return s.Cursor
}

// SetChainId sets the value of ChainId.
func (s *TokenHoldersResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenHoldersResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenHoldersResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenHoldersResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenHoldersResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *TokenHoldersResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetData sets the value of Data.
func (s *TokenHoldersResponse) SetData(val []TokenHolder) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *TokenHoldersResponse) SetTotal(val float64) {
	s.Total = val
}

// SetCursor sets the value of Cursor.
func (s *TokenHoldersResponse) SetCursor(val OptString) {
	s.Cursor = val
}

func (*TokenHoldersResponse) getTokenHoldersRes() {}

// Ref: #/components/schemas/TokenLogoResponse
type TokenLogoResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token logo url.
	LogoUrl string `json:"logoUrl"`
}

// GetChainId returns the value of ChainId.
func (s *TokenLogoResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenLogoResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenLogoResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenLogoResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetLogoUrl returns the value of LogoUrl.
func (s *TokenLogoResponse) GetLogoUrl() string {
	return s.LogoUrl
}

// SetChainId sets the value of ChainId.
func (s *TokenLogoResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenLogoResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenLogoResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenLogoResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetLogoUrl sets the value of LogoUrl.
func (s *TokenLogoResponse) SetLogoUrl(val string) {
	s.LogoUrl = val
}

func (*TokenLogoResponse) getTokenLogoRes() {}

// Ref: #/components/schemas/TokenMetadataResponse
type TokenMetadataResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token name.
	Name string `json:"name"`
	// Token symbol.
	Symbol string `json:"symbol"`
	// Token decimals.
	Decimals float64 `json:"decimals"`
}

// GetChainId returns the value of ChainId.
func (s *TokenMetadataResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenMetadataResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenMetadataResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenMetadataResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetName returns the value of Name.
func (s *TokenMetadataResponse) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *TokenMetadataResponse) GetSymbol() string {
	return s.Symbol
}

// GetDecimals returns the value of Decimals.
func (s *TokenMetadataResponse) GetDecimals() float64 {
	return s.Decimals
}

// SetChainId sets the value of ChainId.
func (s *TokenMetadataResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenMetadataResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenMetadataResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenMetadataResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetName sets the value of Name.
func (s *TokenMetadataResponse) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *TokenMetadataResponse) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimals sets the value of Decimals.
func (s *TokenMetadataResponse) SetDecimals(val float64) {
	s.Decimals = val
}

func (*TokenMetadataResponse) getTokenMetadataRes() {}

// Ref: #/components/schemas/TokenNameResponse
type TokenNameResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token name.
	Name string `json:"name"`
}

// GetChainId returns the value of ChainId.
func (s *TokenNameResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenNameResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenNameResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenNameResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetName returns the value of Name.
func (s *TokenNameResponse) GetName() string {
	return s.Name
}

// SetChainId sets the value of ChainId.
func (s *TokenNameResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenNameResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenNameResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenNameResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetName sets the value of Name.
func (s *TokenNameResponse) SetName(val string) {
	s.Name = val
}

func (*TokenNameResponse) getTokenNameRes() {}

// Ref: #/components/schemas/TokenPriceHistoricalItem
type TokenPriceHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Price of the token in quote units.
	Price float64 `json:"price"`
	// Source of the token price.
	Src string `json:"src"`
	// The internal source for tracing.
	SrcInternal string `json:"srcInternal"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenPriceHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenPriceHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetPrice returns the value of Price.
func (s *TokenPriceHistoricalItem) GetPrice() float64 {
	return s.Price
}

// GetSrc returns the value of Src.
func (s *TokenPriceHistoricalItem) GetSrc() string {
	return s.Src
}

// GetSrcInternal returns the value of SrcInternal.
func (s *TokenPriceHistoricalItem) GetSrcInternal() string {
	return s.SrcInternal
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenPriceHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenPriceHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetPrice sets the value of Price.
func (s *TokenPriceHistoricalItem) SetPrice(val float64) {
	s.Price = val
}

// SetSrc sets the value of Src.
func (s *TokenPriceHistoricalItem) SetSrc(val string) {
	s.Src = val
}

// SetSrcInternal sets the value of SrcInternal.
func (s *TokenPriceHistoricalItem) SetSrcInternal(val string) {
	s.SrcInternal = val
}

// Ref: #/components/schemas/TokenPriceHistoricalResponse
type TokenPriceHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string                     `json:"quoteAddress"`
	Data         []TokenPriceHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *TokenPriceHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenPriceHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenPriceHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenPriceHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenPriceHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenPriceHistoricalResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *TokenPriceHistoricalResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetData returns the value of Data.
func (s *TokenPriceHistoricalResponse) GetData() []TokenPriceHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *TokenPriceHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenPriceHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenPriceHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenPriceHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenPriceHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenPriceHistoricalResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *TokenPriceHistoricalResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetData sets the value of Data.
func (s *TokenPriceHistoricalResponse) SetData(val []TokenPriceHistoricalItem) {
	s.Data = val
}

func (*TokenPriceHistoricalResponse) getTokenPriceHistoricalRes() {}

// Ref: #/components/schemas/TokenPriceResponse
type TokenPriceResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string `json:"quoteAddress"`
	// Price of the token in quote units.
	Price float64 `json:"price"`
	// Source of the token price.
	Src string `json:"src"`
	// The internal source for tracing.
	SrcInternal string `json:"srcInternal"`
}

// GetChainId returns the value of ChainId.
func (s *TokenPriceResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenPriceResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenPriceResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenPriceResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *TokenPriceResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetPrice returns the value of Price.
func (s *TokenPriceResponse) GetPrice() float64 {
	return s.Price
}

// GetSrc returns the value of Src.
func (s *TokenPriceResponse) GetSrc() string {
	return s.Src
}

// GetSrcInternal returns the value of SrcInternal.
func (s *TokenPriceResponse) GetSrcInternal() string {
	return s.SrcInternal
}

// SetChainId sets the value of ChainId.
func (s *TokenPriceResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenPriceResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenPriceResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenPriceResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *TokenPriceResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetPrice sets the value of Price.
func (s *TokenPriceResponse) SetPrice(val float64) {
	s.Price = val
}

// SetSrc sets the value of Src.
func (s *TokenPriceResponse) SetSrc(val string) {
	s.Src = val
}

// SetSrcInternal sets the value of SrcInternal.
func (s *TokenPriceResponse) SetSrcInternal(val string) {
	s.SrcInternal = val
}

func (*TokenPriceResponse) getTokenPriceRes() {}

// Ref: #/components/schemas/TokenReturn
type TokenReturn struct {
	// Token address.
	TokenAddress string `json:"tokenAddress"`
	// Token balance scaled to token decimals.
	Balance float64 `json:"balance"`
	// Token value in quoted currency.
	Value float64 `json:"value"`
	// Overall profit (+ve) or loss (-ve) returned by the token.
	Return float64 `json:"return"`
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenReturn) GetTokenAddress() string {
	return s.TokenAddress
}

// GetBalance returns the value of Balance.
func (s *TokenReturn) GetBalance() float64 {
	return s.Balance
}

// GetValue returns the value of Value.
func (s *TokenReturn) GetValue() float64 {
	return s.Value
}

// GetReturn returns the value of Return.
func (s *TokenReturn) GetReturn() float64 {
	return s.Return
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenReturn) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetBalance sets the value of Balance.
func (s *TokenReturn) SetBalance(val float64) {
	s.Balance = val
}

// SetValue sets the value of Value.
func (s *TokenReturn) SetValue(val float64) {
	s.Value = val
}

// SetReturn sets the value of Return.
func (s *TokenReturn) SetReturn(val float64) {
	s.Return = val
}

// Ref: #/components/schemas/TokenSymbolResponse
type TokenSymbolResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// Token symbol.
	Symbol string `json:"symbol"`
}

// GetChainId returns the value of ChainId.
func (s *TokenSymbolResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenSymbolResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenSymbolResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenSymbolResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetSymbol returns the value of Symbol.
func (s *TokenSymbolResponse) GetSymbol() string {
	return s.Symbol
}

// SetChainId sets the value of ChainId.
func (s *TokenSymbolResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenSymbolResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenSymbolResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenSymbolResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetSymbol sets the value of Symbol.
func (s *TokenSymbolResponse) SetSymbol(val string) {
	s.Symbol = val
}

func (*TokenSymbolResponse) getTokenSymbolRes() {}

// Ref: #/components/schemas/TokenTotalSupplyHistoricalItem
type TokenTotalSupplyHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token total supply.
	TotalSupply float64 `json:"totalSupply"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenTotalSupplyHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenTotalSupplyHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTotalSupply returns the value of TotalSupply.
func (s *TokenTotalSupplyHistoricalItem) GetTotalSupply() float64 {
	return s.TotalSupply
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenTotalSupplyHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenTotalSupplyHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTotalSupply sets the value of TotalSupply.
func (s *TokenTotalSupplyHistoricalItem) SetTotalSupply(val float64) {
	s.TotalSupply = val
}

// Ref: #/components/schemas/TokenTotalSupplyHistoricalResponse
type TokenTotalSupplyHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the total supply is scaled by token decimals.
	Scaled bool                             `json:"scaled"`
	Data   []TokenTotalSupplyHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *TokenTotalSupplyHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenTotalSupplyHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenTotalSupplyHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenTotalSupplyHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenTotalSupplyHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenTotalSupplyHistoricalResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenTotalSupplyHistoricalResponse) GetScaled() bool {
	return s.Scaled
}

// GetData returns the value of Data.
func (s *TokenTotalSupplyHistoricalResponse) GetData() []TokenTotalSupplyHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *TokenTotalSupplyHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenTotalSupplyHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenTotalSupplyHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenTotalSupplyHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenTotalSupplyHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenTotalSupplyHistoricalResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenTotalSupplyHistoricalResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetData sets the value of Data.
func (s *TokenTotalSupplyHistoricalResponse) SetData(val []TokenTotalSupplyHistoricalItem) {
	s.Data = val
}

func (*TokenTotalSupplyHistoricalResponse) getTokenTotalSupplyHistoricalRes() {}

// Ref: #/components/schemas/TokenTotalSupplyResponse
type TokenTotalSupplyResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the total supply is scaled by token decimals.
	Scaled bool `json:"scaled"`
	// Token total supply.
	TotalSupply float64 `json:"totalSupply"`
}

// GetChainId returns the value of ChainId.
func (s *TokenTotalSupplyResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *TokenTotalSupplyResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *TokenTotalSupplyResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenTotalSupplyResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenTotalSupplyResponse) GetScaled() bool {
	return s.Scaled
}

// GetTotalSupply returns the value of TotalSupply.
func (s *TokenTotalSupplyResponse) GetTotalSupply() float64 {
	return s.TotalSupply
}

// SetChainId sets the value of ChainId.
func (s *TokenTotalSupplyResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *TokenTotalSupplyResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *TokenTotalSupplyResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenTotalSupplyResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenTotalSupplyResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetTotalSupply sets the value of TotalSupply.
func (s *TokenTotalSupplyResponse) SetTotalSupply(val float64) {
	s.TotalSupply = val
}

func (*TokenTotalSupplyResponse) getTokenTotalSupplyRes() {}

// Ref: #/components/schemas/TokenValue
type TokenValue struct {
	// Token address.
	TokenAddress string `json:"tokenAddress"`
	// Token price in quoted currency.
	TokenPrice float64 `json:"tokenPrice"`
	// Token balance scaled to token decimals.
	Balance float64 `json:"balance"`
	// Token value in quoted currency.
	Value float64 `json:"value"`
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenValue) GetTokenAddress() string {
	return s.TokenAddress
}

// GetTokenPrice returns the value of TokenPrice.
func (s *TokenValue) GetTokenPrice() float64 {
	return s.TokenPrice
}

// GetBalance returns the value of Balance.
func (s *TokenValue) GetBalance() float64 {
	return s.Balance
}

// GetValue returns the value of Value.
func (s *TokenValue) GetValue() float64 {
	return s.Value
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenValue) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetTokenPrice sets the value of TokenPrice.
func (s *TokenValue) SetTokenPrice(val float64) {
	s.TokenPrice = val
}

// SetBalance sets the value of Balance.
func (s *TokenValue) SetBalance(val float64) {
	s.Balance = val
}

// SetValue sets the value of Value.
func (s *TokenValue) SetValue(val float64) {
	s.Value = val
}

// Ref: #/components/schemas/TokenVolumeHistoricalItem
type TokenVolumeHistoricalItem struct {
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token volume.
	Volume float64 `json:"volume"`
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenVolumeHistoricalItem) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenVolumeHistoricalItem) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenVolumeHistoricalItem) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenVolumeHistoricalItem) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetVolume returns the value of Volume.
func (s *TokenVolumeHistoricalItem) GetVolume() float64 {
	return s.Volume
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenVolumeHistoricalItem) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenVolumeHistoricalItem) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenVolumeHistoricalItem) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenVolumeHistoricalItem) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetVolume sets the value of Volume.
func (s *TokenVolumeHistoricalItem) SetVolume(val float64) {
	s.Volume = val
}

// Ref: #/components/schemas/TokenVolumeHistoricalResponse
type TokenVolumeHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the volume is scaled by token decimals.
	Scaled bool                        `json:"scaled"`
	Data   []TokenVolumeHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *TokenVolumeHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenVolumeHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenVolumeHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenVolumeHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenVolumeHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenVolumeHistoricalResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenVolumeHistoricalResponse) GetScaled() bool {
	return s.Scaled
}

// GetData returns the value of Data.
func (s *TokenVolumeHistoricalResponse) GetData() []TokenVolumeHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *TokenVolumeHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenVolumeHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenVolumeHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenVolumeHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenVolumeHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenVolumeHistoricalResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenVolumeHistoricalResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetData sets the value of Data.
func (s *TokenVolumeHistoricalResponse) SetData(val []TokenVolumeHistoricalItem) {
	s.Data = val
}

func (*TokenVolumeHistoricalResponse) getTokenVolumeHistoricalRes() {}

// Ref: #/components/schemas/TokenVolumeResponse
type TokenVolumeResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Token address for the price.
	TokenAddress string `json:"tokenAddress"`
	// If the volume is scaled by token decimals.
	Scaled bool `json:"scaled"`
	// Token volume.
	Volume float64 `json:"volume"`
}

// GetChainId returns the value of ChainId.
func (s *TokenVolumeResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *TokenVolumeResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *TokenVolumeResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *TokenVolumeResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *TokenVolumeResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetTokenAddress returns the value of TokenAddress.
func (s *TokenVolumeResponse) GetTokenAddress() string {
	return s.TokenAddress
}

// GetScaled returns the value of Scaled.
func (s *TokenVolumeResponse) GetScaled() bool {
	return s.Scaled
}

// GetVolume returns the value of Volume.
func (s *TokenVolumeResponse) GetVolume() float64 {
	return s.Volume
}

// SetChainId sets the value of ChainId.
func (s *TokenVolumeResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *TokenVolumeResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *TokenVolumeResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *TokenVolumeResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *TokenVolumeResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetTokenAddress sets the value of TokenAddress.
func (s *TokenVolumeResponse) SetTokenAddress(val string) {
	s.TokenAddress = val
}

// SetScaled sets the value of Scaled.
func (s *TokenVolumeResponse) SetScaled(val bool) {
	s.Scaled = val
}

// SetVolume sets the value of Volume.
func (s *TokenVolumeResponse) SetVolume(val float64) {
	s.Volume = val
}

func (*TokenVolumeResponse) getTokenVolumeRes() {}

// Ref: #/components/schemas/UtilitiesErrorResponse
type UtilitiesErrorResponse struct {
	// If an error response (non-200 status code), the status code will be set.
	StatusCode float64 `json:"statusCode"`
	// If an error response (non-200 status code), the error will be set with a short string for the code.
	Error string `json:"error"`
	// If an error response (non-200 status code), the message will be set with an error message. It can
	// either be a string or a list of strings.
	Message UtilitiesErrorResponseMessage `json:"message"`
}

// GetStatusCode returns the value of StatusCode.
func (s *UtilitiesErrorResponse) GetStatusCode() float64 {
	return s.StatusCode
}

// GetError returns the value of Error.
func (s *UtilitiesErrorResponse) GetError() string {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *UtilitiesErrorResponse) GetMessage() UtilitiesErrorResponseMessage {
	return s.Message
}

// SetStatusCode sets the value of StatusCode.
func (s *UtilitiesErrorResponse) SetStatusCode(val float64) {
	s.StatusCode = val
}

// SetError sets the value of Error.
func (s *UtilitiesErrorResponse) SetError(val string) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *UtilitiesErrorResponse) SetMessage(val UtilitiesErrorResponseMessage) {
	s.Message = val
}

func (*UtilitiesErrorResponse) blockFromTimestampRes() {}
func (*UtilitiesErrorResponse) blockToTimestampRes()   {}
func (*UtilitiesErrorResponse) crossChainBlockRes()    {}
func (*UtilitiesErrorResponse) getChainsRes()          {}
func (*UtilitiesErrorResponse) getLatestBlockRes()     {}

// If an error response (non-200 status code), the message will be set with an error message. It can
// either be a string or a list of strings.
// UtilitiesErrorResponseMessage represents sum type.
type UtilitiesErrorResponseMessage struct {
	Type        UtilitiesErrorResponseMessageType // switch on this field
	String      string
	StringArray []string
}

// UtilitiesErrorResponseMessageType is oneOf type of UtilitiesErrorResponseMessage.
type UtilitiesErrorResponseMessageType string

// Possible values for UtilitiesErrorResponseMessageType.
const (
	StringUtilitiesErrorResponseMessage      UtilitiesErrorResponseMessageType = "string"
	StringArrayUtilitiesErrorResponseMessage UtilitiesErrorResponseMessageType = "[]string"
)

// IsString reports whether UtilitiesErrorResponseMessage is string.
func (s UtilitiesErrorResponseMessage) IsString() bool {
	return s.Type == StringUtilitiesErrorResponseMessage
}

// IsStringArray reports whether UtilitiesErrorResponseMessage is []string.
func (s UtilitiesErrorResponseMessage) IsStringArray() bool {
	return s.Type == StringArrayUtilitiesErrorResponseMessage
}

// SetString sets UtilitiesErrorResponseMessage to string.
func (s *UtilitiesErrorResponseMessage) SetString(v string) {
	s.Type = StringUtilitiesErrorResponseMessage
	s.String = v
}

// GetString returns string and true boolean if UtilitiesErrorResponseMessage is string.
func (s UtilitiesErrorResponseMessage) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUtilitiesErrorResponseMessage returns new UtilitiesErrorResponseMessage from string.
func NewStringUtilitiesErrorResponseMessage(v string) UtilitiesErrorResponseMessage {
	var s UtilitiesErrorResponseMessage
	s.SetString(v)
	return s
}

// SetStringArray sets UtilitiesErrorResponseMessage to []string.
func (s *UtilitiesErrorResponseMessage) SetStringArray(v []string) {
	s.Type = StringArrayUtilitiesErrorResponseMessage
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UtilitiesErrorResponseMessage is []string.
func (s UtilitiesErrorResponseMessage) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUtilitiesErrorResponseMessage returns new UtilitiesErrorResponseMessage from []string.
func NewStringArrayUtilitiesErrorResponseMessage(v []string) UtilitiesErrorResponseMessage {
	var s UtilitiesErrorResponseMessage
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/ValueHistoricalItem
type ValueHistoricalItem struct {
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Portfolio value in quoted currency.
	Value     float64      `json:"value"`
	Positions []TokenValue `json:"positions"`
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ValueHistoricalItem) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *ValueHistoricalItem) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetValue returns the value of Value.
func (s *ValueHistoricalItem) GetValue() float64 {
	return s.Value
}

// GetPositions returns the value of Positions.
func (s *ValueHistoricalItem) GetPositions() []TokenValue {
	return s.Positions
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ValueHistoricalItem) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *ValueHistoricalItem) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetValue sets the value of Value.
func (s *ValueHistoricalItem) SetValue(val float64) {
	s.Value = val
}

// SetPositions sets the value of Positions.
func (s *ValueHistoricalItem) SetPositions(val []TokenValue) {
	s.Positions = val
}

// Ref: #/components/schemas/ValueHistoricalResponse
type ValueHistoricalResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Start block number.
	StartBlockNumber float64 `json:"startBlockNumber"`
	// End block number.
	EndBlockNumber float64 `json:"endBlockNumber"`
	// Start timestamp. Number of seconds since January 1, 1970.
	StartTimestamp float64 `json:"startTimestamp"`
	// End timestamp. Number of seconds since January 1, 1970.
	EndTimestamp float64 `json:"endTimestamp"`
	// Account addresses.
	Accounts []string `json:"accounts"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string                `json:"quoteAddress"`
	Data         []ValueHistoricalItem `json:"data"`
}

// GetChainId returns the value of ChainId.
func (s *ValueHistoricalResponse) GetChainId() float64 {
	return s.ChainId
}

// GetStartBlockNumber returns the value of StartBlockNumber.
func (s *ValueHistoricalResponse) GetStartBlockNumber() float64 {
	return s.StartBlockNumber
}

// GetEndBlockNumber returns the value of EndBlockNumber.
func (s *ValueHistoricalResponse) GetEndBlockNumber() float64 {
	return s.EndBlockNumber
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *ValueHistoricalResponse) GetStartTimestamp() float64 {
	return s.StartTimestamp
}

// GetEndTimestamp returns the value of EndTimestamp.
func (s *ValueHistoricalResponse) GetEndTimestamp() float64 {
	return s.EndTimestamp
}

// GetAccounts returns the value of Accounts.
func (s *ValueHistoricalResponse) GetAccounts() []string {
	return s.Accounts
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *ValueHistoricalResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetData returns the value of Data.
func (s *ValueHistoricalResponse) GetData() []ValueHistoricalItem {
	return s.Data
}

// SetChainId sets the value of ChainId.
func (s *ValueHistoricalResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetStartBlockNumber sets the value of StartBlockNumber.
func (s *ValueHistoricalResponse) SetStartBlockNumber(val float64) {
	s.StartBlockNumber = val
}

// SetEndBlockNumber sets the value of EndBlockNumber.
func (s *ValueHistoricalResponse) SetEndBlockNumber(val float64) {
	s.EndBlockNumber = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *ValueHistoricalResponse) SetStartTimestamp(val float64) {
	s.StartTimestamp = val
}

// SetEndTimestamp sets the value of EndTimestamp.
func (s *ValueHistoricalResponse) SetEndTimestamp(val float64) {
	s.EndTimestamp = val
}

// SetAccounts sets the value of Accounts.
func (s *ValueHistoricalResponse) SetAccounts(val []string) {
	s.Accounts = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *ValueHistoricalResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetData sets the value of Data.
func (s *ValueHistoricalResponse) SetData(val []ValueHistoricalItem) {
	s.Data = val
}

func (*ValueHistoricalResponse) getValueHistoricalRes() {}

// Ref: #/components/schemas/ValueResponse
type ValueResponse struct {
	// Chain ID.
	ChainId float64 `json:"chainId"`
	// Block number.
	BlockNumber float64 `json:"blockNumber"`
	// Block timestamp. Number of seconds since January 1, 1970.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// Account addresses.
	Accounts []string `json:"accounts"`
	// Quote address is the token/currency of the price units.
	QuoteAddress string `json:"quoteAddress"`
	// Portfolio value in quoted currency.
	Value     float64      `json:"value"`
	Positions []TokenValue `json:"positions"`
}

// GetChainId returns the value of ChainId.
func (s *ValueResponse) GetChainId() float64 {
	return s.ChainId
}

// GetBlockNumber returns the value of BlockNumber.
func (s *ValueResponse) GetBlockNumber() float64 {
	return s.BlockNumber
}

// GetBlockTimestamp returns the value of BlockTimestamp.
func (s *ValueResponse) GetBlockTimestamp() float64 {
	return s.BlockTimestamp
}

// GetAccounts returns the value of Accounts.
func (s *ValueResponse) GetAccounts() []string {
	return s.Accounts
}

// GetQuoteAddress returns the value of QuoteAddress.
func (s *ValueResponse) GetQuoteAddress() string {
	return s.QuoteAddress
}

// GetValue returns the value of Value.
func (s *ValueResponse) GetValue() float64 {
	return s.Value
}

// GetPositions returns the value of Positions.
func (s *ValueResponse) GetPositions() []TokenValue {
	return s.Positions
}

// SetChainId sets the value of ChainId.
func (s *ValueResponse) SetChainId(val float64) {
	s.ChainId = val
}

// SetBlockNumber sets the value of BlockNumber.
func (s *ValueResponse) SetBlockNumber(val float64) {
	s.BlockNumber = val
}

// SetBlockTimestamp sets the value of BlockTimestamp.
func (s *ValueResponse) SetBlockTimestamp(val float64) {
	s.BlockTimestamp = val
}

// SetAccounts sets the value of Accounts.
func (s *ValueResponse) SetAccounts(val []string) {
	s.Accounts = val
}

// SetQuoteAddress sets the value of QuoteAddress.
func (s *ValueResponse) SetQuoteAddress(val string) {
	s.QuoteAddress = val
}

// SetValue sets the value of Value.
func (s *ValueResponse) SetValue(val float64) {
	s.Value = val
}

// SetPositions sets the value of Positions.
func (s *ValueResponse) SetPositions(val []TokenValue) {
	s.Positions = val
}

func (*ValueResponse) getValueRes() {}
