// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleCheckHealthRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'v': // Prefix: "v1/"
				origElem := elem
				if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "model"
					origElem := elem
					if l := len("model"); len(elem) >= l && elem[0:l] == "model" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						origElem := elem
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "esults"
							origElem := elem
							if l := len("esults"); len(elem) >= l && elem[0:l] == "esults" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetCachedModelResultsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'u': // Prefix: "un"
							origElem := elem
							if l := len("un"); len(elem) >= l && elem[0:l] == "un" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleRunModelRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case 't': // Prefix: "time-stats"
								origElem := elem
								if l := len("time-stats"); len(elem) >= l && elem[0:l] == "time-stats" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetModelRuntimeStatsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListModelsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "slug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetModelBySlugRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/deployments"
								origElem := elem
								if l := len("/deployments"); len(elem) >= l && elem[0:l] == "/deployments" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetModelDeploymentsBySlugRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "portfolio/"
					origElem := elem
					if l := len("portfolio/"); len(elem) >= l && elem[0:l] == "portfolio/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "chainId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "accounts"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "positions"
								origElem := elem
								if l := len("positions"); len(elem) >= l && elem[0:l] == "positions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetPositionsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetPositionsHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'r': // Prefix: "returns"
								origElem := elem
								if l := len("returns"); len(elem) >= l && elem[0:l] == "returns" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetReturnsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'v': // Prefix: "value"
								origElem := elem
								if l := len("value"); len(elem) >= l && elem[0:l] == "value" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetValueRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetValueHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 't': // Prefix: "tokens/"
					origElem := elem
					if l := len("tokens/"); len(elem) >= l && elem[0:l] == "tokens/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "chainId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "tokenAddress"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetTokenMetadataRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "abi"
								origElem := elem
								if l := len("abi"); len(elem) >= l && elem[0:l] == "abi" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenAbiRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'b': // Prefix: "balance"
								origElem := elem
								if l := len("balance"); len(elem) >= l && elem[0:l] == "balance" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTokenBalanceRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetTokenBalanceHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "creation-block"
								origElem := elem
								if l := len("creation-block"); len(elem) >= l && elem[0:l] == "creation-block" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenCreationBlockRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'd': // Prefix: "decimals"
								origElem := elem
								if l := len("decimals"); len(elem) >= l && elem[0:l] == "decimals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenDecimalsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'h': // Prefix: "holders"
								origElem := elem
								if l := len("holders"); len(elem) >= l && elem[0:l] == "holders" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTokenHoldersRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/count"
									origElem := elem
									if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetTokenHoldersCountRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/historical"
										origElem := elem
										if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetTokenHoldersCountHistoricalRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'l': // Prefix: "logo"
								origElem := elem
								if l := len("logo"); len(elem) >= l && elem[0:l] == "logo" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenLogoRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'n': // Prefix: "name"
								origElem := elem
								if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenNameRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'p': // Prefix: "price"
								origElem := elem
								if l := len("price"); len(elem) >= l && elem[0:l] == "price" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTokenPriceRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetTokenPriceHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "symbol"
								origElem := elem
								if l := len("symbol"); len(elem) >= l && elem[0:l] == "symbol" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTokenSymbolRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "total-supply"
								origElem := elem
								if l := len("total-supply"); len(elem) >= l && elem[0:l] == "total-supply" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTokenTotalSupplyRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetTokenTotalSupplyHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "volume"
								origElem := elem
								if l := len("volume"); len(elem) >= l && elem[0:l] == "volume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetTokenVolumeRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetTokenVolumeHistoricalRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "u"
					origElem := elem
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "sage/"
						origElem := elem
						if l := len("sage/"); len(elem) >= l && elem[0:l] == "sage/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "requests"
							origElem := elem
							if l := len("requests"); len(elem) >= l && elem[0:l] == "requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetDailyModelUsageRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 't': // Prefix: "to"
							origElem := elem
							if l := len("to"); len(elem) >= l && elem[0:l] == "to" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "p"
								origElem := elem
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTopModelsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "tal"
								origElem := elem
								if l := len("tal"); len(elem) >= l && elem[0:l] == "tal" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetTotalModelUsageRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tilities/chains"
						origElem := elem
						if l := len("tilities/chains"); len(elem) >= l && elem[0:l] == "tilities/chains" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetChainsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "chainId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/block/"
								origElem := elem
								if l := len("/block/"); len(elem) >= l && elem[0:l] == "/block/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cross-chain"
									origElem := elem
									if l := len("cross-chain"); len(elem) >= l && elem[0:l] == "cross-chain" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleCrossChainBlockRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'f': // Prefix: "from-timestamp"
									origElem := elem
									if l := len("from-timestamp"); len(elem) >= l && elem[0:l] == "from-timestamp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleBlockFromTimestampRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'l': // Prefix: "latest"
									origElem := elem
									if l := len("latest"); len(elem) >= l && elem[0:l] == "latest" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetLatestBlockRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "to-timestamp"
									origElem := elem
									if l := len("to-timestamp"); len(elem) >= l && elem[0:l] == "to-timestamp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleBlockToTimestampRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: CheckHealth
						r.name = "CheckHealth"
						r.summary = "Healthcheck status"
						r.operationID = "CheckHealth"
						r.pathPattern = "/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'v': // Prefix: "v1/"
				origElem := elem
				if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'm': // Prefix: "model"
					origElem := elem
					if l := len("model"); len(elem) >= l && elem[0:l] == "model" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						origElem := elem
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "esults"
							origElem := elem
							if l := len("esults"); len(elem) >= l && elem[0:l] == "esults" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetCachedModelResults
									r.name = "GetCachedModelResults"
									r.summary = "Cached model results"
									r.operationID = "GetCachedModelResults"
									r.pathPattern = "/v1/model/results"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'u': // Prefix: "un"
							origElem := elem
							if l := len("un"); len(elem) >= l && elem[0:l] == "un" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "RunModel"
									r.summary = "Run model"
									r.operationID = "RunModel"
									r.pathPattern = "/v1/model/run"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 't': // Prefix: "time-stats"
								origElem := elem
								if l := len("time-stats"); len(elem) >= l && elem[0:l] == "time-stats" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetModelRuntimeStats
										r.name = "GetModelRuntimeStats"
										r.summary = "Model runtime stats"
										r.operationID = "GetModelRuntimeStats"
										r.pathPattern = "/v1/model/runtime-stats"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListModels"
								r.summary = "List metadata for available models"
								r.operationID = "ListModels"
								r.pathPattern = "/v1/models"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "slug"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetModelBySlug"
									r.summary = "Get model metadata by slug"
									r.operationID = "GetModelBySlug"
									r.pathPattern = "/v1/models/{slug}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/deployments"
								origElem := elem
								if l := len("/deployments"); len(elem) >= l && elem[0:l] == "/deployments" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetModelDeploymentsBySlug
										r.name = "GetModelDeploymentsBySlug"
										r.summary = "Get model deployments of a model by slug"
										r.operationID = "GetModelDeploymentsBySlug"
										r.pathPattern = "/v1/models/{slug}/deployments"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "portfolio/"
					origElem := elem
					if l := len("portfolio/"); len(elem) >= l && elem[0:l] == "portfolio/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "chainId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "accounts"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "positions"
								origElem := elem
								if l := len("positions"); len(elem) >= l && elem[0:l] == "positions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetPositions"
										r.summary = "Get accounts' positions"
										r.operationID = "GetPositions"
										r.pathPattern = "/v1/portfolio/{chainId}/{accounts}/positions"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetPositionsHistorical
											r.name = "GetPositionsHistorical"
											r.summary = "Get accounts' historical positions"
											r.operationID = "GetPositionsHistorical"
											r.pathPattern = "/v1/portfolio/{chainId}/{accounts}/positions/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'r': // Prefix: "returns"
								origElem := elem
								if l := len("returns"); len(elem) >= l && elem[0:l] == "returns" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetReturns
										r.name = "GetReturns"
										r.summary = "Get accounts' token returns"
										r.operationID = "GetReturns"
										r.pathPattern = "/v1/portfolio/{chainId}/{accounts}/returns"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'v': // Prefix: "value"
								origElem := elem
								if l := len("value"); len(elem) >= l && elem[0:l] == "value" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetValue"
										r.summary = "Get accounts' value"
										r.operationID = "GetValue"
										r.pathPattern = "/v1/portfolio/{chainId}/{accounts}/value"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetValueHistorical
											r.name = "GetValueHistorical"
											r.summary = "Get accounts' historical value"
											r.operationID = "GetValueHistorical"
											r.pathPattern = "/v1/portfolio/{chainId}/{accounts}/value/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 't': // Prefix: "tokens/"
					origElem := elem
					if l := len("tokens/"); len(elem) >= l && elem[0:l] == "tokens/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "chainId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "tokenAddress"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[1] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetTokenMetadata"
								r.summary = "Get token metadata"
								r.operationID = "GetTokenMetadata"
								r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "abi"
								origElem := elem
								if l := len("abi"); len(elem) >= l && elem[0:l] == "abi" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenAbi
										r.name = "GetTokenAbi"
										r.summary = "Get token ABI"
										r.operationID = "GetTokenAbi"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/abi"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'b': // Prefix: "balance"
								origElem := elem
								if l := len("balance"); len(elem) >= l && elem[0:l] == "balance" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTokenBalance"
										r.summary = "Get token balance"
										r.operationID = "GetTokenBalance"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/balance"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetTokenBalanceHistorical
											r.name = "GetTokenBalanceHistorical"
											r.summary = "Get historical balance"
											r.operationID = "GetTokenBalanceHistorical"
											r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/balance/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "creation-block"
								origElem := elem
								if l := len("creation-block"); len(elem) >= l && elem[0:l] == "creation-block" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenCreationBlock
										r.name = "GetTokenCreationBlock"
										r.summary = "Get token creation block"
										r.operationID = "GetTokenCreationBlock"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/creation-block"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'd': // Prefix: "decimals"
								origElem := elem
								if l := len("decimals"); len(elem) >= l && elem[0:l] == "decimals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenDecimals
										r.name = "GetTokenDecimals"
										r.summary = "Get token decimals"
										r.operationID = "GetTokenDecimals"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/decimals"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'h': // Prefix: "holders"
								origElem := elem
								if l := len("holders"); len(elem) >= l && elem[0:l] == "holders" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTokenHolders"
										r.summary = "Get token holders"
										r.operationID = "GetTokenHolders"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/holders"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/count"
									origElem := elem
									if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetTokenHoldersCount"
											r.summary = "Get total number of token holders"
											r.operationID = "GetTokenHoldersCount"
											r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/holders/count"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/historical"
										origElem := elem
										if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: GetTokenHoldersCountHistorical
												r.name = "GetTokenHoldersCountHistorical"
												r.summary = "Get historical total number of token holders"
												r.operationID = "GetTokenHoldersCountHistorical"
												r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/holders/count/historical"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 'l': // Prefix: "logo"
								origElem := elem
								if l := len("logo"); len(elem) >= l && elem[0:l] == "logo" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenLogo
										r.name = "GetTokenLogo"
										r.summary = "Get token logo"
										r.operationID = "GetTokenLogo"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/logo"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'n': // Prefix: "name"
								origElem := elem
								if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenName
										r.name = "GetTokenName"
										r.summary = "Get token name"
										r.operationID = "GetTokenName"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/name"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'p': // Prefix: "price"
								origElem := elem
								if l := len("price"); len(elem) >= l && elem[0:l] == "price" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTokenPrice"
										r.summary = "Get token price data"
										r.operationID = "GetTokenPrice"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/price"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetTokenPriceHistorical
											r.name = "GetTokenPriceHistorical"
											r.summary = "Get historical price"
											r.operationID = "GetTokenPriceHistorical"
											r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/price/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "symbol"
								origElem := elem
								if l := len("symbol"); len(elem) >= l && elem[0:l] == "symbol" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTokenSymbol
										r.name = "GetTokenSymbol"
										r.summary = "Get token symbol"
										r.operationID = "GetTokenSymbol"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/symbol"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "total-supply"
								origElem := elem
								if l := len("total-supply"); len(elem) >= l && elem[0:l] == "total-supply" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTokenTotalSupply"
										r.summary = "Get token's total supply"
										r.operationID = "GetTokenTotalSupply"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/total-supply"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetTokenTotalSupplyHistorical
											r.name = "GetTokenTotalSupplyHistorical"
											r.summary = "Get historical total supply"
											r.operationID = "GetTokenTotalSupplyHistorical"
											r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/total-supply/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'v': // Prefix: "volume"
								origElem := elem
								if l := len("volume"); len(elem) >= l && elem[0:l] == "volume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetTokenVolume"
										r.summary = "Get token volume"
										r.operationID = "GetTokenVolume"
										r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/volume"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/historical"
									origElem := elem
									if l := len("/historical"); len(elem) >= l && elem[0:l] == "/historical" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetTokenVolumeHistorical
											r.name = "GetTokenVolumeHistorical"
											r.summary = "Get historical volume"
											r.operationID = "GetTokenVolumeHistorical"
											r.pathPattern = "/v1/tokens/{chainId}/{tokenAddress}/volume/historical"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "u"
					origElem := elem
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "sage/"
						origElem := elem
						if l := len("sage/"); len(elem) >= l && elem[0:l] == "sage/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "requests"
							origElem := elem
							if l := len("requests"); len(elem) >= l && elem[0:l] == "requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetDailyModelUsage
									r.name = "GetDailyModelUsage"
									r.summary = "Model Request statistics"
									r.operationID = "GetDailyModelUsage"
									r.pathPattern = "/v1/usage/requests"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 't': // Prefix: "to"
							origElem := elem
							if l := len("to"); len(elem) >= l && elem[0:l] == "to" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "p"
								origElem := elem
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTopModels
										r.name = "GetTopModels"
										r.summary = "Top Used Models"
										r.operationID = "GetTopModels"
										r.pathPattern = "/v1/usage/top"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "tal"
								origElem := elem
								if l := len("tal"); len(elem) >= l && elem[0:l] == "tal" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: GetTotalModelUsage
										r.name = "GetTotalModelUsage"
										r.summary = "Total Model Usage"
										r.operationID = "GetTotalModelUsage"
										r.pathPattern = "/v1/usage/total"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 't': // Prefix: "tilities/chains"
						origElem := elem
						if l := len("tilities/chains"); len(elem) >= l && elem[0:l] == "tilities/chains" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetChains"
								r.summary = "Get list of chains."
								r.operationID = "GetChains"
								r.pathPattern = "/v1/utilities/chains"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "chainId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/block/"
								origElem := elem
								if l := len("/block/"); len(elem) >= l && elem[0:l] == "/block/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cross-chain"
									origElem := elem
									if l := len("cross-chain"); len(elem) >= l && elem[0:l] == "cross-chain" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: CrossChainBlock
											r.name = "CrossChainBlock"
											r.summary = "Get equivalent cross-chain block."
											r.operationID = "CrossChainBlock"
											r.pathPattern = "/v1/utilities/chains/{chainId}/block/cross-chain"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'f': // Prefix: "from-timestamp"
									origElem := elem
									if l := len("from-timestamp"); len(elem) >= l && elem[0:l] == "from-timestamp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: BlockFromTimestamp
											r.name = "BlockFromTimestamp"
											r.summary = "Get block number from timestamp."
											r.operationID = "BlockFromTimestamp"
											r.pathPattern = "/v1/utilities/chains/{chainId}/block/from-timestamp"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'l': // Prefix: "latest"
									origElem := elem
									if l := len("latest"); len(elem) >= l && elem[0:l] == "latest" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetLatestBlock
											r.name = "GetLatestBlock"
											r.summary = "Get latest block."
											r.operationID = "GetLatestBlock"
											r.pathPattern = "/v1/utilities/chains/{chainId}/block/latest"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "to-timestamp"
									origElem := elem
									if l := len("to-timestamp"); len(elem) >= l && elem[0:l] == "to-timestamp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: BlockToTimestamp
											r.name = "BlockToTimestamp"
											r.summary = "Convert block number to timestamp."
											r.operationID = "BlockToTimestamp"
											r.pathPattern = "/v1/utilities/chains/{chainId}/block/to-timestamp"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
